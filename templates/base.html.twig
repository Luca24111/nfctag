{# templates/base.html.twig #}
<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Dashboard{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">

    <style>
        html, body {
            font-size: 1.1rem;
            font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #121212;
            color: white;
        }

        .ai-bubble {
            position: fixed;
            bottom: 100px;
            right: 20px;
            color: white;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.4rem;
            cursor: pointer;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            z-index: 1031;
        }

        .ai-chat {
            position: fixed;
            bottom: 170px;
            right: 20px;
            width: 350px;
            background: rgba(28, 28, 30, 0.95);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.4);
            z-index: 1031;
        }

        .ai-chat input {
            width: 100%;
            padding: 0.8rem 1rem;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: #424244;
            color: white;
            font-size: 0.9rem;
            transition: all 0.2s ease;
        }

        .ai-chat input:focus {
            outline: none;
            border-color: #007aff;
            box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
            background: #4a4a4c;
        }

        .ai-chat button {
            width: 100%;
            padding: 0.8rem;
            border-radius: 12px;
            border: none;
            background: linear-gradient(135deg, #007aff 0%, #0056cc 100%);
            color: white;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-top: 0.8rem;
        }

        .ai-chat button:hover {
            background: linear-gradient(135deg, #0056cc 0%, #004499 100%);
            transform: translateY(-1px);
        }

        .ai-chat button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .ai-output {
            margin-top: 1rem;
            padding: 1rem;
            background: rgba(44, 44, 46, 0.6);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.05);
            max-height: 300px;
            overflow-y: auto;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        /* Toggle switch styles */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #424244;
            transition: 0.3s;
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
        }

        input:checked + .toggle-slider {
            background-color: #34c759;
        }

        input:checked + .toggle-slider:before {
            transform: translateX(20px);
        }

        .toggle-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1rem;
        }

        .toggle-label {
            color: #ffffff;
            font-size: 0.9rem;
            margin-right: 0.5rem;
        }

        .hidden {
            display: none;
        }
        
        /* Header Menu Button Apple Style */
        #header-dropdown-btn:hover {
            background: rgba(255, 255, 255, 0.1) !important;
            transform: scale(1.1);
        }
        
        /* Header Dropdown Items Hover */
        .dropdown-item:hover {
            background: rgba(255, 255, 255, 0.08) !important;
            transform: translateX(2px);
        }
        
        /* Header Dropdown Animation */
        .header-dropdown {
            animation: dropdownSlideIn 0.2s ease-out;
        }
        
        @keyframes dropdownSlideIn {
            from {
                opacity: 0;
                transform: translateY(-10px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        


        .main-layout {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            background-color: #1e1e1e;
            width: 240px;
            padding: 2rem 1rem;
            box-shadow: 2px 0 8px rgba(0,0,0,0.3);
            flex-shrink: 0;
            display: flex;
            flex-direction: column;
        }

        .sidebar h5 { color: #bb86fc; }
        .sidebar a { margin: 1rem 0; color: #aaaaaa; text-decoration: none; transition: 0.2s; }
        .sidebar a:hover { color: #bb86fc; }

        .main-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .topbar {
            background-color: #1e1e1e;
            padding: 1rem 2rem;
            box-shadow: 0 1px 4px rgba(0,0,0,0.3);
        }

        .dashboard-content {
            padding: 1rem;
            flex-grow: 1;
            overflow-y: auto;
            padding-bottom: 100px;
        }

        .bottom-nav {
            position: fixed;
            bottom: 16px;
            left: 50%;
            transform: translateX(-50%);
            width: calc(100% - 2rem);
            max-width: 340px;
            background-color: #424244;
            border-radius: 24px;
            border: 1px solid #2e2e2e;
            padding: 0.5rem 1.5rem;
            box-shadow: 0 8px 16px rgba(0,0,0,0.4);
            z-index: 1030;
            display: flex;
            justify-content: space-around;
            align-items: center;
        }

        .nav-icon {
            position: relative;
            color: #999999;
            font-size: 1.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.6;
            transition: color 0.2s ease, opacity 0.2s ease;
        }

        .nav-icon:hover,
        .nav-icon.active {
            color: #ffffff;
            opacity: 1;
        }

        .nav-icon:not(.center-button).active::after {
            content: "";
            position: absolute;
            bottom: -9px;
            left: 50%;
            transform: translateX(-50%);
            width: 5px;
            height: 5px;
            background-color: #ffffff;
            border-radius: 50%;
        }

        .nav-icon.center-button {
            background-color: white;
            border-radius: 16px;
            width: 70px;
            height: 54px;
            color: #ffffff;
            font-size: 1.5rem;
            opacity: 0.8;
            transition: all 0.3s ease;
        }

        .nav-icon.center-button:hover {
            opacity: 1;
        }

        body.fade-in {
            opacity: 1;
            transform: translateX(0);
            transition: transform 0.4s ease, opacity 0.4s ease;
        }

        body.fade-out-forward {
            opacity: 0;
            transform: translateX(-30px);
            transition: transform 0.4s ease, opacity 0.4s ease;
        }

        body.fade-out-backward {
            opacity: 0;
            transform: translateX(30px);
            transition: transform 0.4s ease, opacity 0.4s ease;
        }

        @keyframes ai-sparkle {
            0%, 100% {
                box-shadow: 0 0 10px #bb86fc, 0 0 20px #bb86fc, 0 0 30px #bb86fc;
            }
            50% {
                box-shadow: 0 0 20px #ffffff, 0 0 40px #bb86fc, 0 0 60px #ffffff;
            }
        }

        .ai-bubble.sparkle {
            animation: ai-sparkle 0.6s ease-out;
        }


    </style>
</head>

<body>
<div class="main-layout">
    <div class="main-content">


        <!-- Header Row -->
        {% if app.user %}
        <div class="header-row" style="display: flex; align-items: center; justify-content: space-between; padding: 1rem 1.5rem; background: #121212;">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <div style="font-size: 1.2rem; font-weight: 600; color: #ffffff; letter-spacing: -0.04em;">
                    Ciao, {{ app.user ? app.user.name|default(app.user.email|split('@')[0]) : 'Utente' }}
                </div>
            </div>
            
            <div class="header-menu" style="position: relative;">
                <button id="header-dropdown-btn" style="background: transparent; border: none; color: white; font-size: 1.2rem; cursor: pointer; display: flex; align-items: center; justify-content: center; width: 32px; height: 32px; border-radius: 50%; transition: all 0.2s ease;">
                    <i class="fas fa-bars"></i>
                </button>
                
                <div id="header-dropdown" class="header-dropdown" style="position: absolute; top: 100%; right: 0; margin-top: 0.5rem; background: rgba(28, 28, 30, 0.98); backdrop-filter: blur(30px); -webkit-backdrop-filter: blur(30px); border: 1px solid rgba(255, 255, 255, 0.12); border-radius: 20px; padding: 0.75rem 0; min-width: 220px; box-shadow: 0 12px 40px rgba(0,0,0,0.6); display: none; z-index: 1001;">
                    <div class="dropdown-item" data-action="toggle-ai" style="display: flex; align-items: center; padding: 1rem 1.25rem; color: #ffffff; font-size: 0.95rem; font-weight: 500; transition: all 0.2s ease; cursor: pointer; border-radius: 0;">
                        <i class="fas fa-robot" style="margin-right: 1rem; width: 18px; text-align: center; color: #bb86fc; font-size: 1rem;"></i>
                        <span style="flex: 1;">Tagly Assistant</span>
                        <div style="margin-left: 1rem;">
                            <div class="toggle-switch" style="margin: 0; transform: scale(0.9);">
                                <input type="checkbox" id="header-ai-toggle" style="display: none;">
                                <label class="toggle-slider" for="header-ai-toggle" style="cursor: pointer;"></label>
                            </div>
                        </div>
                    </div>
                    <div style="height: 1px; background: rgba(255, 255, 255, 0.1); margin: 0.25rem 0;"></div>
                    <div class="dropdown-item" data-action="logout" style="display: flex; align-items: center; padding: 1rem 1.25rem; color: #ffffff; font-size: 0.95rem; font-weight: 500; transition: all 0.2s ease; cursor: pointer; border-radius: 0;">
                        <i class="fas fa-sign-out-alt" style="margin-right: 1rem; width: 18px; text-align: center; color: #999999; font-size: 1rem;"></i>
                        <span>Logout</span>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}

        <main class="dashboard-content">
            {% block body %}{% endblock %}
        </main>

        <div class="bottom-nav">
            <a href="{{ path('app_home') }}" class="nav-icon{% if app.request.attributes.get('_route') == 'app_home' %} active{% endif %}">
                <i class="fas fa-network-wired"></i>
            </a>

            <a href="{{ path('app_nfc') }}" class="nav-icon center-button{% if app.request.attributes.get('_route') == 'app_nfc' %} active{% endif %}">
                <img style="width: 60%;" src="{{ asset('img/nfc-symbol-brands.svg') }}">
            </a>

            <a href="{{ path('app_eventi') }}" class="nav-icon{% if app.request.attributes.get('_route') == 'app_eventi' %} active{% endif %}">
                <i class="fas fa-calendar-alt"></i>
            </a>
        </div>
    </div>
</div>



<div id="ai-helper" class="ai-bubble">
    <img src="{{ asset('img/ai-icon.png') }}" alt="AI" style="width: 40px; height: 40px;" />
</div>

<div id="ai-chatbox" class="ai-chat hidden">
    <h6 style="color: white; font-size: 1.1rem; margin-bottom: 1rem; font-weight: 600;">Tagly Assistant</h6>
    <input type="text" id="ai-input" placeholder="Es. vestito rosso, scarpe nike..." />
    <button id="ai-send" class="btn btn-primary btn-sm">Cerca</button>
    <div id="ai-output" class="ai-output" style="display: none;"></div>
    
    <!-- Toggle AI (nascosto ma necessario per il funzionamento) -->
    <input type="checkbox" id="ai-toggle" style="display: none;" checked>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
      const helper = document.getElementById('ai-helper');
      const chatbox = document.getElementById('ai-chatbox');
      const input = document.getElementById('ai-input');
      const output = document.getElementById('ai-output');
      const send = document.getElementById('ai-send');
      const aiToggle = document.getElementById('ai-toggle');
      


      // Carica lo stato del toggle dal localStorage
      const aiEnabled = localStorage.getItem('ai-enabled') !== 'false';
      aiToggle.checked = aiEnabled;
      updateAIVisibility(aiEnabled);
      
      // Aggiorna il toggle del menu header
      const headerAiToggle = document.getElementById('header-ai-toggle');
      if (headerAiToggle) {
          headerAiToggle.checked = aiEnabled;
      }

      // Gestione toggle assistente
      aiToggle.addEventListener('change', function() {
          const enabled = this.checked;
          localStorage.setItem('ai-enabled', enabled);
          updateAIVisibility(enabled);
      });

      function updateAIVisibility(enabled) {
          if (enabled) {
              helper.style.display = 'flex';
              if (chatbox.classList.contains('hidden')) {
                  // Se il chat è aperto, mantienilo aperto
              } else {
                  chatbox.classList.add('hidden');
              }
          } else {
              helper.style.display = 'none';
              chatbox.classList.add('hidden');
          }
      }

      if (helper && chatbox) {
          helper.addEventListener('click', () => {
              if (aiToggle.checked) {
                  chatbox.classList.toggle('hidden');
                  helper.classList.add('sparkle');
                  setTimeout(() => helper.classList.remove('sparkle'), 600);
              }
          });
      }

      if (send && input && output) {
          send.addEventListener('click', async () => {
              await performSearch();
          });
          
          // Ricerca con Enter
          input.addEventListener('keypress', async (e) => {
              if (e.key === 'Enter') {
                  await performSearch();
              }
          });
      }
      
      async function performSearch() {
          const input = document.getElementById('ai-input');
          const output = document.getElementById('ai-output');
          const send = document.getElementById('ai-send');
          
          if (!input.value.trim()) {
              output.innerHTML = '<div style="text-align: center; color: #999;">Inserisci il nome di un prodotto da cercare.</div>';
              output.style.display = 'block';
              return;
          }
          
          // Disabilita il pulsante e mostra loading
          send.disabled = true;
          send.textContent = 'Cercando...';
          output.innerHTML = '<div style="text-align: center; color: #999;">Sto cercando...</div>';
          output.style.display = 'block';
          
          try {
              const response = await fetch('/ai/where-product', {
                  method: 'POST',
                  headers: { 
                      'Content-Type': 'application/json',
                      'X-Requested-With': 'XMLHttpRequest'
                  },
                  body: JSON.stringify({ question: input.value.trim() })
              });
              
              if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
              }
              
              const result = await response.json();
              output.innerHTML = result.answer || '<div style="text-align: center; color: #999;">Errore nella ricerca.</div>';
          } catch (error) {
              console.error('Errore nella ricerca:', error);
              output.innerHTML = '<div style="text-align: center; color: #999;">Errore di connessione. Verifica la connessione e riprova.</div>';
          } finally {
              // Riabilita il pulsante
              send.disabled = false;
              send.textContent = 'Cerca';
          }
      }

      // Header dropdown functionality
      const headerDropdownBtn = document.getElementById('header-dropdown-btn');
      const headerDropdown = document.getElementById('header-dropdown');
      

      
      if (headerDropdownBtn && headerDropdown) {
          // Toggle header dropdown menu
          headerDropdownBtn.addEventListener('click', function(e) {
              e.stopPropagation();
              const isVisible = headerDropdown.style.display === 'block';
              headerDropdown.style.display = isVisible ? 'none' : 'block';
              
              // Add hover effect to button
              if (!isVisible) {
                  headerDropdownBtn.style.background = 'rgba(255, 255, 255, 0.1)';
                  headerDropdownBtn.style.transform = 'scale(0.95)';
              } else {
                  headerDropdownBtn.style.background = 'transparent';
                  headerDropdownBtn.style.transform = 'scale(1)';
              }
          });
          
          // Handle header menu item clicks
          const headerMenuItems = document.querySelectorAll('.dropdown-item');
          headerMenuItems.forEach(item => {
              item.addEventListener('click', function(e) {
                  e.stopPropagation();
                  const action = this.getAttribute('data-action');
                  
                  // Se è il toggle AI, non chiudere il menu
                  if (action === 'toggle-ai') {
                      handleHeaderAction(action);
                  } else {
                      handleHeaderAction(action);
                      headerDropdown.style.display = 'none';
                      headerDropdownBtn.style.background = 'transparent';
                      headerDropdownBtn.style.transform = 'scale(1)';
                  }
              });
              
              // Hover effects for header menu items
              item.addEventListener('mouseenter', function() {
                  this.style.background = 'rgba(255, 255, 255, 0.1)';
              });
              
              item.addEventListener('mouseleave', function() {
                  this.style.background = 'transparent';
              });
          });
          
          // Handle header AI toggle
          const headerAiToggle = document.getElementById('header-ai-toggle');
          if (headerAiToggle) {
              headerAiToggle.addEventListener('change', function() {
                  const enabled = this.checked;
                  localStorage.setItem('ai-enabled', enabled);
                  updateAIVisibility(enabled);
                  
                  // Sincronizza con il toggle principale
                  if (aiToggle) {
                      aiToggle.checked = enabled;
                  }
                  

              });
          }
          
          // Close header dropdown when clicking outside
          document.addEventListener('click', function(e) {
              if (!headerDropdownBtn.contains(e.target) && !headerDropdown.contains(e.target)) {
                  headerDropdown.style.display = 'none';
                  headerDropdownBtn.style.background = 'transparent';
                  headerDropdownBtn.style.transform = 'scale(1)';
              }
          });
      }
      
      function handleHeaderAction(action) {
          switch(action) {
              case 'logout':
                  if (confirm('Sei sicuro di voler uscire?')) {
                      window.location.href = '/logout';
                  }
                  break;
          }
      }



      // Notification System
      window.showNotification = function(message, type = 'info', duration = 5000) {
          const container = document.getElementById('notifications-container');
          if (!container) return;

          const notification = document.createElement('div');
          notification.style.cssText = `
              background: rgba(28, 28, 30, 0.95);
              backdrop-filter: blur(20px);
              border: 1px solid rgba(255, 255, 255, 0.08);
              border-radius: 12px;
              padding: 1rem;
              margin-bottom: 0.8rem;
              color: white;
              font-size: 0.9rem;
              font-weight: 500;
              box-shadow: 0 8px 32px rgba(0,0,0,0.4);
              transform: translateX(-100%);
              transition: transform 0.3s ease;
              pointer-events: auto;
              cursor: pointer;
              position: relative;
              overflow: hidden;
          `;

          // Icon based on type
          const icons = {
              'success': '✅',
              'error': '❌',
              'warning': '⚠️',
              'info': 'ℹ️'
          };

          notification.innerHTML = `
              <div style="display: flex; align-items: center; gap: 0.5rem;">
                  <span style="font-size: 1.1rem;">${icons[type] || icons.info}</span>
                  <span>${message}</span>
              </div>
              <div class="swipe-indicator" style="position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); color: #999; font-size: 0.8rem; opacity: 0.6;">
                  ← Swipe per eliminare
              </div>
          `;

          container.appendChild(notification);

          // Animate in
          setTimeout(() => {
              notification.style.transform = 'translateX(0)';
          }, 100);

          // Auto remove after duration
          setTimeout(() => {
              notification.style.transform = 'translateX(-100%)';
              setTimeout(() => {
                  if (notification.parentNode) {
                      notification.parentNode.removeChild(notification);
                  }
              }, 300);
          }, duration);

          // Swipe to delete functionality
          let startX = 0;
          let currentX = 0;
          let isSwiping = false;

          notification.addEventListener('touchstart', (e) => {
              startX = e.touches[0].clientX;
              isSwiping = true;
          });

          notification.addEventListener('touchmove', (e) => {
              if (!isSwiping) return;
              currentX = e.touches[0].clientX;
              const diff = currentX - startX;
              
              if (diff < 0) { // Swipe left
                  notification.style.transform = `translateX(${diff}px)`;
                  notification.style.opacity = 1 + (diff / 200);
              }
          });

          notification.addEventListener('touchend', () => {
              if (!isSwiping) return;
              isSwiping = false;
              
              const diff = currentX - startX;
              if (diff < -100) { // Swipe left enough to delete
                  notification.style.transform = 'translateX(-100%)';
                  setTimeout(() => {
                      if (notification.parentNode) {
                          notification.parentNode.removeChild(notification);
                      }
                  }, 300);
              } else {
                  notification.style.transform = 'translateX(0)';
                  notification.style.opacity = 1;
              }
          });

          // Click to dismiss
          notification.addEventListener('click', () => {
              notification.style.transform = 'translateX(-100%)';
              setTimeout(() => {
                  if (notification.parentNode) {
                      notification.parentNode.removeChild(notification);
                  }
              }, 300);
          });

          return notification;
      };
  });
</script>
</body>
</html>