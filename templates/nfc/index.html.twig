{% extends 'base.html.twig' %}

{% block title %}NFC Tag{% endblock %}

{% block body %}
<script>
  if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
      document.body.innerHTML = '<div style="text-align:center; margin-top: 5rem; color:white; font-size:1.4rem;">üñ•Ô∏è Questa funzione √® disponibile solo da smartphone con supporto NFC.</div>';
      document.title = 'Non disponibile su Desktop';
  }
</script>
<link href="https://fonts.cdnfonts.com/css/sf-pro-display" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    :root {
        --color-success: #28a745;
        --color-error: #dc3545;
        --color-info: #007bff;
    }

    body {
        font-size: 1.1rem;
        font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        text-align: center;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }

    .nfc-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin-top: 90px;
        padding: 0 1rem;
    }

    .nfc-icon-button {
        background: none;
        border: none;
        padding: 0;
        cursor: pointer;
    }

    .nfc-icon {
        width: 90%;
        opacity: 0.9;
        margin-bottom: 10px;
        transition: transform 0.3s ease;
    }

    .nfc-icon-button:hover .nfc-icon {
        transform: scale(1.20);
        animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
        0% {
            transform: scale(1);
            opacity: 0.6;
        }
        50% {
            transform: scale(1.05);
            opacity: 1;
        }
        100% {
            transform: scale(1);
            opacity: 0.6;
        }
    }

    @keyframes blink-blue {
      0%,100% { background-color: var(--color-info); }
      50%    { background-color: #2e2e2e; }
    }

    .is-pulsing {
      animation: pulse 2s ease-in-out infinite;
    }

    .nfc-subtext {
        font-size: 1.4rem;
        font-weight: 500;
        opacity: 0.6;
        color: var(--text-primary);
        letter-spacing: -0.04em;
        margin-bottom: 1.5rem;
        transition: opacity 0.4s ease;
    }
    .nfc-subtext.clicked {
        opacity: 1;
    }

    .product-info {
        margin-top: 2rem;
        background: var(--bg-secondary);
        border: 1px solid var(--border-color);
        border-radius: 16px;
        padding: 1.5rem;
        width: 90%;
        max-width: 380px;
        margin: 0 auto;
        box-shadow: 0 4px 20px var(--shadow-color);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
    .product-info.visible {
        opacity: 1;
        transform: translateY(0);
    }
    .product-info:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 30px var(--shadow-color);
    }

    .product-name {
        font-size: 1.5rem;
        letter-spacing: -0.04em;
        font-weight: 500;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
    }

    #product-image.visible {
        display: block;
        animation: fadeIn 0.4s ease-in-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: scale(0.95); }
        to { opacity: 1; transform: scale(1); }
    }

    .status-pill {
        display: inline-block;
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-primary);
        padding: 0.4rem 0.8rem;
        border-radius: 12px;
        text-transform: uppercase;
    }
    .status-pill.in-warehouse { background-color: var(--color-success); }
    .status-pill.out-warehouse { background-color: var(--color-error); }



    #nfc-loader {
        transition: opacity 0.3s ease;
    }

    #cancel-scan-inline:hover {
        background-color: #bb2d3b;
    }

    .hidden {
        display: none !important;
    }

    .close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: var(--bg-tertiary);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border: 1px solid var(--border-color);
        border-radius: 50%;
        width: 32px;
        height: 32px;
        color: var(--text-primary);
        font-size: 1.2rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        box-shadow: 0 4px 12px var(--shadow-color);
    }
    
    .close-button:hover {
        background: var(--bg-secondary) !important;
        transform: scale(1.1);
        box-shadow: 0 6px 16px var(--shadow-color);
    }

    .status-glow-success {
        animation: glow-success 1.2s ease-out;
    }
    .status-glow-error {
        animation: glow-error 1.2s ease-out;
    }
    @keyframes glow-success {
        0%,100% { box-shadow: 0 0 0 rgba(40, 167, 69, 0.5); }
        50% { box-shadow: 0 0 40px 10px rgba(40, 167, 69, 0.8); }
    }
    @keyframes glow-error {
        0%,100% { box-shadow: 0 0 0 rgba(220, 53, 69, 0.5); }
        50% { box-shadow: 0 0 40px 10px rgba(220, 53, 69, 0.8); }
    }
    #scan-history h3 {
        font-weight:500;
        letter-spacing:-0.02em;
    }
    #scan-history-list li {
        padding:0.25rem 0;
        border-bottom:1px solid var(--border-color);
    }
    #scan-history-list li:last-child {
        border-bottom:none;
    }
</style>

<style>
  .btn-history-active {
      background: rgba(255, 255, 255, 0.95) !important;
      backdrop-filter: blur(20px) !important;
      border-color: rgba(255, 255, 255, 0.2) !important;
      transform: scale(1.05) !important;
  }
  .btn-history-active i {
      color: #666666 !important;
  }
  
  .btn-dev-active {
      background: rgba(187, 134, 252, 0.9) !important;
      backdrop-filter: blur(20px) !important;
      border-color: rgba(187, 134, 252, 0.3) !important;
      transform: scale(1.05) !important;
  }
  .btn-dev-active i {
      color: white !important;
  }
  

  
  /* Multiscan button pulsing blue effect */
  .btn-multiscan-active {
      background: rgba(0, 122, 255, 0.9) !important;
      backdrop-filter: blur(20px) !important;
      border-color: rgba(0, 122, 255, 0.3) !important;
      transform: scale(1.05) !important;
      animation: pulseBlue 2s infinite;
      box-shadow: 0 0 20px rgba(0, 122, 255, 0.6), 0 4px 12px rgba(0, 122, 255, 0.4);
  }
  .btn-multiscan-active i {
      color: white !important;
  }
  
  @keyframes pulseBlue {
      0% {
          box-shadow: 0 0 20px rgba(0, 122, 255, 0.6), 0 4px 12px rgba(0, 0, 0, 0.2);
      }
      50% {
          box-shadow: 0 0 30px rgba(0, 122, 255, 0.8), 0 4px 12px rgba(0, 0, 0, 0.2);
      }
      100% {
          box-shadow: 0 0 20px rgba(0, 122, 255, 0.6), 0 4px 12px rgba(0, 0, 0, 0.2);
      }
  }
  

  
      /* Dev Mode Box button hover effects */
    #test-animations-btn:hover,
    #debug-model-btn:hover,
    #test-transitions-btn:hover {
        background: rgba(44, 44, 46, 0.9) !important;
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.3);
    }
    
    #close-dev-mode:hover {
        background: linear-gradient(135deg, #ff5252 0%, #d32f2f 100%) !important;
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 6px 16px rgba(255, 107, 107, 0.4);
    }
    
    /* History buttons hover effects */
    #export-history:hover {
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 6px 16px rgba(0, 122, 255, 0.4);
    }
    
    #clear-history:hover {
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 6px 16px rgba(255, 59, 48, 0.4);
    }
</style>

<style>
    .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #ffffff;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        margin: 1rem auto 0;
        animation: spin 1s linear infinite;
    }
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    @keyframes slideOutLeftFade {
      to { opacity: 0; transform: translateX(-100%); }
    }
    @keyframes slideInRightFade {
      from { opacity: 0; transform: translateX(100%); }
      to { opacity: 1; transform: translateX(0); }
    }
    .slide-out-left {
      animation: slideOutLeftFade 0.5s forwards;
    }
    .slide-in-right {
      animation: slideInRightFade 0.5s forwards;
    }
    .nfc-feedback-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 123, 255, 0.5);
      pointer-events: none;
      animation: fadeOverlay 1s ease-out forwards;
      z-index: 9999;
    }
    @keyframes fadeOverlay {
      from { opacity: 1; }
      to { opacity: 0; }
    }

    /* Apple-style 3D Animation Effects */
    .apple-3d-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at center, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.05) 40%, transparent 70%);
        opacity: 0;
        pointer-events: none;
        z-index: 9998;
        animation: appleOverlayFade 3s ease-out forwards;
    }

    @keyframes appleOverlayFade {
        0% { opacity: 0; }
        20% { opacity: 1; }
        85% { opacity: 1; }
        100% { opacity: 0; }
    }

    .apple-3d-text {
        position: fixed;
        bottom: 25%;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        font-size: 1.4rem;
        font-weight: 600;
        text-align: center;
        opacity: 0;
        z-index: 9999;
        animation: appleTextFade 3s ease-out forwards;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
        letter-spacing: 0.5px;
    }

    @keyframes appleTextFade {
        0% { opacity: 0; transform: translateX(-50%) translateY(30px); }
        30% { opacity: 1; transform: translateX(-50%) translateY(0); }
        70% { opacity: 1; transform: translateX(-50%) translateY(0); }
        100% { opacity: 0; transform: translateX(-50%) translateY(-30px); }
    }

    .apple-3d-particles {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 9999;
        opacity: 0;
        animation: particlesFade 3s ease-out forwards;
    }

    @keyframes particlesFade {
        0% { opacity: 0; }
        20% { opacity: 1; }
        80% { opacity: 1; }
        100% { opacity: 0; }
    }

    .particle {
        position: absolute;
        width: 4px;
        height: 4px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        animation: particleFloat 3s ease-out forwards;
        z-index: 10000;
    }

    @keyframes particleFloat {
        0% {
            transform: translateY(100vh) scale(0);
            opacity: 0;
        }
        20% {
            opacity: 1;
        }
        100% {
            transform: translateY(-100px) scale(1);
            opacity: 0;
        }
    }
    
    @keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateY(-50%) translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateY(-50%) translateX(0);
        }
    }
</style>


<div class="button-row" style="display: flex; justify-content: space-between; width: 90%; max-width: 380px; margin: 1rem auto;">
  <button id="btn-multiscan" aria-label="Scansione Multipla"
          style="width: 48px; height: 48px; border: none; border-radius: 16px; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
    <i class="fas fa-layer-group" style="color: white; font-size: 1.2rem;"></i>
  </button>
  <button id="btn-history" aria-label="Mostra Storico"
          style="width: 48px; height: 48px; border: none; border-radius: 16px; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
    <i class="fas fa-clock" style="color: white; font-size: 1.2rem;"></i>
  </button>
  <button id="btn-dev-mode" aria-label="Dev Mode"
          style="width: 48px; height: 48px; border: none; border-radius: 16px; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); display: flex; align-items: center; justify-content: center; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
    <i class="fas fa-code" style="color: white; font-size: 1.2rem;"></i>
  </button>
</div>

<div class="nfc-wrapper">
    <!-- NFC icon as button -->
    <button id="nfc-button" class="nfc-icon-button" tabindex="0" aria-label="Attiva scansione NFC">
        <img src="{{ asset('img/Risorsa_2.svg') }}" alt="NFC Icona" class="nfc-icon">
    </button>
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>

    <model-viewer id="tagly-3d"
                  src="{{ asset('models/tagly.glb') }}"
                  auto-rotate
                  camera-controls
                  exposure="1.8"
                  interaction-prompt="none"
                  camera-orbit="0deg 75deg 7.5m"
                  min-camera-orbit="auto auto 3m"
                  max-camera-orbit="auto auto 9m"
                  field-of-view="45deg"
                  loading="eager"
                  reveal="auto"
                  camera-target="0m 0m 0m"
                  rotation-per-second="120deg"
                  auto-rotate-delay="0"
                  style="position: fixed;
                         top: 50%;
                         left: 50%;
                         width: 300px;
                         height: 300px;
                         transform: translate(-50%, -50%) scale(0.7);
                         background: transparent;
                         opacity: 0;
                         pointer-events: none;
                         z-index: 10000;
                         transition: opacity 1.2s cubic-bezier(.4,1.4,.6,1), transform 1.2s cubic-bezier(.4,1.4,.6,1);
                         box-shadow: none;
                         border-radius: 0;">
        <div slot="poster" style="background: rgba(0,0,0,0.5); color: white; display: flex; align-items: center; justify-content: center; width: 100%; height: 100%;">
            Caricamento modello 3D...
        </div>
        
        <!-- Luci personalizzate per effetto illuminazione -->
        <div slot="light" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none;">
            <div style="position: absolute; top: 20%; left: 20%; width: 60%; height: 60%; background: radial-gradient(circle, rgba(255,255,255,0.4) 0%, transparent 70%); border-radius: 50%;"></div>
            <div style="position: absolute; top: 60%; left: 80%; width: 40%; height: 40%; background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 60%); border-radius: 50%;"></div>
        </div>
    </model-viewer>
    <div id="nfc-subtext" class="nfc-subtext" aria-live="polite">Clicca per la lettura</div>

    <div id="product-info" class="product-info hidden" style="position: relative;">
        <button id="close-product-info" class="close-button" tabindex="0">√ó</button>
        <img id="product-image" src="" alt="Immagine prodotto" style="width: 100%; border-radius: 12px; margin-bottom: 1rem;" class="hidden">
        <div id="product-name" class="product-name"></div>
        <div id="product-state" class="status-pill"></div>
    </div>
</div>

<!-- Dev Mode Box -->
<div id="dev-mode-box" style="margin-top: 2rem; background: rgba(28, 28, 30, 0.95); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.08); border-radius: 20px; padding: 2rem; width: 90%; max-width: 400px; margin: 0 auto; box-shadow: 0 8px 32px rgba(0,0,0,0.4); display: none; text-align: left;">
    <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1.5rem;">
        <h3 style="font-size: 1.3rem; font-weight: 600; color: #ffffff; margin: 0; letter-spacing: -0.04em;">Dev Mode</h3>
        <div style="display: flex; gap: 0.5rem;">
            <span style="background: rgba(187, 134, 252, 0.2); color: #bb86fc; padding: 0.3rem 0.6rem; border-radius: 8px; font-size: 0.7rem; font-weight: 500;">Test</span>
            <span style="background: rgba(255, 107, 107, 0.2); color: #ff6b6b; padding: 0.3rem 0.6rem; border-radius: 8px; font-size: 0.7rem; font-weight: 500;">Debug</span>
        </div>
    </div>
    
    <div style="display: flex; flex-direction: column; gap: 0.8rem; margin-bottom: 1.5rem;">
        <button id="test-animations-btn" style="display: flex; align-items: center; padding: 1rem; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 16px; color: white; font-size: 0.9rem; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
            <i class="fas fa-magic" style="margin-right: 0.75rem; width: 16px; text-align: center; color: #bb86fc;"></i>
            Test Animazioni 3D
        </button>
        
        <button id="debug-model-btn" style="display: flex; align-items: center; padding: 1rem; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 16px; color: white; font-size: 0.9rem; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
            <i class="fas fa-bug" style="margin-right: 0.75rem; width: 16px; text-align: center; color: #ff6b6b;"></i>
            Debug Modello 3D
        </button>
        
        <button id="test-transitions-btn" style="display: flex; align-items: center; padding: 1rem; background: rgba(44, 44, 46, 0.8); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 16px; color: white; font-size: 0.9rem; cursor: pointer; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);">
            <i class="fas fa-exchange-alt" style="margin-right: 0.75rem; width: 16px; text-align: center; color: #4ecdc4;"></i>
            Test Transizioni
        </button>
    </div>
    
    <button id="close-dev-mode" style="width: 100%; padding: 1rem; font-size: 0.9rem; background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%); color: white; border: none; border-radius: 16px; cursor: pointer; font-weight: 500; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);">
        <i class="fas fa-times" style="margin-right: 0.5rem;"></i>Chiudi Dev Mode
    </button>
</div>

<div id="scan-history" style="margin-top: 2rem; background: rgba(28, 28, 30, 0.95); backdrop-filter: blur(20px); -webkit-backdrop-filter: blur(20px); border: 1px solid rgba(255, 255, 255, 0.08); border-radius: 20px; padding: 2rem; width: 90%; max-width: 400px; margin: 0 auto; box-shadow: 0 8px 32px rgba(0,0,0,0.4); display: none; text-align: left;">
    <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 1.5rem;">
        <h3 style="font-size: 1.3rem; font-weight: 600; color: #ffffff; margin: 0; letter-spacing: -0.04em;">Storico scansioni</h3>
        <div style="display: flex; gap: 0.5rem;">
            <span style="background: rgba(52, 199, 89, 0.2); color: #34c759; padding: 0.3rem 0.6rem; border-radius: 8px; font-size: 0.7rem; font-weight: 500;">In</span>
            <span style="background: rgba(255, 59, 48, 0.2); color: #ff3b30; padding: 0.3rem 0.6rem; border-radius: 8px; font-size: 0.7rem; font-weight: 500;">Fuori</span>
        </div>
    </div>
    
    <div style="position: relative; margin-bottom: 1.5rem;">
        <input type="text" id="scan-filter" placeholder="Cerca nel storico..." style="width: 100%; padding: 1rem 1rem 1rem 3rem; border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.1); background: rgba(44, 44, 46, 0.6); color: white; font-size: 0.9rem; box-sizing: border-box;">
        <i class="fas fa-search" style="position: absolute; left: 1rem; top: 50%; transform: translateY(-50%); color: #999; font-size: 0.9rem;"></i>
    </div>
    
    <div id="scan-history-list" style="max-height: 300px; overflow-y: auto; margin-bottom: 1.5rem;"></div>
    
    <div style="display: flex; gap: 0.75rem;">
        <button id="export-history" style="flex: 1; padding: 0.75rem; font-size: 0.85rem; background: linear-gradient(135deg, #007aff 0%, #0056cc 100%); color: white; border: none; border-radius: 16px; cursor: pointer; font-weight: 500; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(0, 122, 255, 0.3);">
            <i class="fas fa-download" style="margin-right: 0.5rem;"></i>Esporta
        </button>
        <button id="clear-history" style="flex: 1; padding: 0.75rem; font-size: 0.85rem; background: linear-gradient(135deg, #ff3b30 0%, #d70015 100%); color: white; border: none; border-radius: 16px; cursor: pointer; font-weight: 500; transition: all 0.2s ease; box-shadow: 0 4px 12px rgba(255, 59, 48, 0.3);">
            <i class="fas fa-trash" style="margin-right: 0.5rem;"></i>Svuota
        </button>
    </div>
</div>



<script>
    let ndefAbortController;
    const productInfo = document.getElementById('product-info');
    const productName = document.getElementById('product-name');
    const productState = document.getElementById('product-state');
    const subtext = document.getElementById('nfc-subtext');
    const nfcButton = document.getElementById('nfc-button');
    
    function updateProductInfo(p) {
        productName.textContent = p.name;
        const productImage = document.getElementById('product-image');
        if (p.imageUrl) {
            productImage.src = p.imageUrl;
            productImage.classList.add('visible');
            productImage.classList.remove('hidden');
        } else {
            productImage.src = '';
            productImage.classList.remove('visible');
            productImage.classList.add('hidden');
        }
        const stateText = p.out ? 'Fuori dal magazzino' : 'In magazzino';
        productState.textContent = stateText;
        productState.className = 'status-pill ' + (p.out ? 'out-warehouse' : 'in-warehouse');
        productInfo.classList.remove('hidden');
        productInfo.classList.add('visible');

        productInfo.classList.remove('status-glow-success', 'status-glow-error');
        void productInfo.offsetWidth;
        productInfo.classList.add(p.out ? 'status-glow-error' : 'status-glow-success');

        addScanToHistory(p);
        
        // Mostra notifica
        if (typeof window.showNotification === 'function') {
            const status = p.out ? 'uscito' : 'entrato';
            window.showNotification(`${p.name} √® ${status} dal magazzino`, p.out ? 'warning' : 'success', 4000);
        }
    }

    function resetProductInfo() {
        productName.textContent = '';
        productState.textContent = '';
        productState.className = 'status-pill';
        const productImage = document.getElementById('product-image');
        productImage.src = '';
        productImage.classList.remove('visible');
        productImage.classList.add('hidden');
        productInfo.classList.remove('visible');
        productInfo.classList.add('hidden');
    }

    function stopLoopAudio() {
        loopAudio.pause();
        loopAudio.currentTime = 0;
    }

    function enableNfcButton() {
        if (nfcButton) nfcButton.disabled = false;
    }
    function disableNfcButton() {
        if (nfcButton) nfcButton.disabled = true;
    }

    function stopNfc() {
        if (ndefAbortController) {
            ndefAbortController.abort();
            ndefAbortController = null;
        }
        isNfcActive = false;

        // Reset multiscan mode and button state
        multiScanMode = false;
        const btnMulti = document.getElementById('btn-multiscan');
        if (btnMulti) {
            btnMulti.classList.remove('btn-multiscan-active');
        }

        stopPulseAnimation();

        resetSubtext();

        resetProductInfo();
        showLoader(false);

        stopLoopAudio();

        reversedAudio.currentTime = 0;
        reversedAudio.play().catch(e => console.warn("Reversed audio error:", e));
        enableNfcButton();
    }

    let multiScanMode = false;
    async function startNfc() {
        isNfcActive = true;
        disableNfcButton();

        // Cambia testo subtext al click e aggiunge effetto opacit√†
        subtext.textContent = 'Pronto per la lettura...';
        subtext.classList.add('clicked');
        showLoader(true);

        if ('NDEFReader' in window) {
            try {
                const ndef = new NDEFReader();
                ndefAbortController = new AbortController();
                await ndef.scan({ signal: ndefAbortController.signal });
                loopAudio.play().catch(e => console.warn("Loop audio play error:", e));

                ndef.onreading = async event => {
                    // Prevent double reads and handle abort
                    if (ndefAbortController?.signal.aborted) return;
                    if (!multiScanMode) {
                        if (ndef.readingHandled) return;
                        ndef.readingHandled = true;
                        setTimeout(() => {
                            ndef.readingHandled = false;
                        }, 2000);
                    }

                    // --- Gestione tag vergine: scrivi immediatamente ---
                    if (!event.message.records.length) {
                        subtext.innerHTML = "Tag vergine rilevato. Registrazione in corso...";
                        const loader = document.createElement('div');
                        loader.className = 'spinner';
                        subtext.appendChild(loader);
                        
                        try {
                            const response = await fetch('{{ path("nfc_next_id") }}');
                            const result = await response.json();
                            const nextId = result.nextId;

                            // Scrivi immediatamente il tag vergine
                            await ndef.write({
                                records: [
                                    {
                                        recordType: "text",
                                        data: nextId.toString()
                                    }
                                ]
                            });

                            // Avvia l'animazione 3D per il nuovo tag registrato
                            showTagly3D();

                            // Feedback di successo
                            subtext.innerHTML = `
                                <span style="color: #28a745;">‚úÖ Tag registrato con successo!</span><br>
                                <span style="color: #bbbbbb; font-size: 0.8em;">ID: ${nextId}</span>
                            `;

                            stopLoopAudio();
                            notificationAudio.currentTime = 0;
                            notificationAudio.play().catch(() => {});

                            // Continua la lettura per scansioni successive
                            return;

                        } catch (error) {
                            console.error("Errore nella registrazione del tag:", error);
                            subtext.textContent = "‚ùå Errore durante la registrazione del tag.";
                            showLoader(false);
                            enableNfcButton();
                            return;
                        }
                    }
                    // --- Fine gestione tag vergine ---

                    for (const record of event.message.records) {
                        if (record.recordType !== 'text') continue;
                        let text = '';
                        try {
                            text = new TextDecoder().decode(record.data);
                        } catch (decodeErr) {
                            console.error('Errore decodifica:', decodeErr);
                            continue;
                        }
                        if (!text || isNaN(Number(text))) {
                            try {
                                const response = await fetch('{{ path("nfc_next_id") }}');
                                const result = await response.json();
                                const nextId = result.nextId;

                                await ndef.write(nextId.toString());

                                subtext.textContent = "Tag programmato con ID: " + nextId;
                                showLoader(false);
                                if (nfcButton) nfcButton.disabled = false;

                                stopLoopAudio();

                                notificationAudio.currentTime = 0;
                                notificationAudio.play().catch(e => console.warn("Notification audio error:", e));

                                return;
                            } catch (err) {
                                console.error("Errore nella scrittura del tag:", err);
                                subtext.textContent = "Errore durante la programmazione.";
                                showLoader(false);
                                enableNfcButton();
                                return;
                            }
                        }

                        try {
                            const csrfToken = '{{ csrf_token("nfc") }}';
                            const controller = new AbortController();
                            const timeout = setTimeout(() => controller.abort(), 5000);
                            const response = await fetch('{{ path('nfc_read') }}', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                                body: 'nfcId=' + encodeURIComponent(text) + '&_token=' + encodeURIComponent(csrfToken),
                                signal: controller.signal
                            });
                            clearTimeout(timeout);
                            const body = await response.json();

                            if (response.status === 404 && body.redirectTo) {
                                window.location.href = body.redirectTo;
                                return;
                            } else if (response.status === 404) {
                                subtext.textContent = "Tag non riconosciuto.";
                                showLoader(false);
                                setTimeout(() => {
                                    ndef.readingHandled = false;
                                }, 1000);
                                return;
                            }
                            if (body.error) {
                                console.error(body.error);
                                resetProductInfo();
                                showLoader(false);
                                subtext.textContent = "Errore di lettura. Riprova.";
                                const errorDiv = document.getElementById('nfc-error');
                                if (errorDiv) {
                                    errorDiv.textContent = "Errore di lettura. Riprova.";
                                    errorDiv.style.display = 'block';
                                }
                                subtext.classList.remove("clicked");
                                setTimeout(() => {
                                    ndef.readingHandled = false;
                                }, 1000);
                                return;
                            }

                            updateProductInfo(body.product);
                            // Non mostrare l'animazione 3D per tag esistenti nel database
                            // showTagly3D();

                            if (!multiScanMode && ndefAbortController) {
                                ndefAbortController.abort();
                                ndefAbortController = null;
                                isNfcActive = false;

                                stopPulseAnimation();

                                resetSubtext();

                                stopLoopAudio();
                            } else {
                                // In modalit√† multiscan, lascia attiva l'interfaccia
                                renderCancelButton();
                                subtext.classList.add("clicked");
                                startPulseAnimation();
                            }

                            notificationAudio.currentTime = 0;
                            notificationAudio.play().catch(e => console.warn("Notification audio error:", e));

                        } catch (err) {
                            console.error('Fetch error:', err);
                            subtext.textContent = "Errore di lettura. Riprova.";
                            const errorDiv = document.getElementById('nfc-error');
                            if (errorDiv) {
                                errorDiv.textContent = "Errore di lettura. Riprova.";
                                errorDiv.style.display = 'block';
                            }
                            subtext.classList.remove("clicked");
                            setTimeout(() => {
                                ndef.readingHandled = false;
                            }, 1000);
                        } finally {
                            showLoader(false);
                            enableNfcButton();
                        }
                    }
                    // Reset the readingHandled flag after a short delay to allow for new reads
                    setTimeout(() => {
                        ndef.readingHandled = false;
                    }, 1000);
                };
            } catch (err) {
                console.error('NFC scan error:', err);
                showLoader(false);
                isNfcActive = false;
                enableNfcButton();
            }
        } else {
            console.error("Web NFC non supportato.");
            showLoader(false);
            isNfcActive = false;
            enableNfcButton();
        }
    }

    function showLoader(show) {
        const subtext = document.getElementById('nfc-subtext');
        if (show) {
            resetProductInfo();
        }
        if (show) {
            renderCancelButton();
        } else {
            if (!multiScanMode) {
                resetSubtext();
            } else {
                renderCancelButton();
            }
        }
    }
</script>

<script>
  // Carica lo storico dal localStorage all'avvio
  let scanHistory = JSON.parse(localStorage.getItem('scanHistory') || '[]');
  
  // Funzione per caricare lo storico all'avvio
  function loadScanHistory() {
      const historyList = document.getElementById('scan-history-list');
      if (!historyList) return;
      
      historyList.innerHTML = '';
      const latest = scanHistory.slice(0, 50);
      latest.forEach(item => {
          const li = document.createElement('div');
          li.style.cssText = `
              background: rgba(44, 44, 46, 0.6);
              border: 1px solid rgba(255, 255, 255, 0.05);
              border-radius: 12px;
              padding: 1rem;
              margin-bottom: 0.8rem;
              display: flex;
              justify-content: space-between;
              align-items: center;
              transition: all 0.2s ease;
              cursor: pointer;
              position: relative;
              overflow: hidden;
          `;
          
          const leftContent = document.createElement('div');
          leftContent.style.cssText = `
              display: flex;
              flex-direction: column;
              gap: 0.3rem;
          `;
          
          const productName = document.createElement('div');
          productName.textContent = item.name;
          productName.style.cssText = `
              font-weight: 600;
              color: white;
              font-size: 0.95rem;
          `;
          
          const timeInfo = document.createElement('div');
          timeInfo.textContent = item.time;
          timeInfo.style.cssText = `
              color: #999;
              font-size: 0.8rem;
          `;
          
          const statusBadge = document.createElement('div');
          statusBadge.textContent = item.state;
          statusBadge.style.cssText = `
              background: ${item.state === 'In' ? 'rgba(52, 199, 89, 0.2)' : 'rgba(255, 59, 48, 0.2)'};
              color: ${item.state === 'In' ? '#34c759' : '#ff3b30'};
              padding: 0.4rem 0.8rem;
              border-radius: 8px;
              font-size: 0.75rem;
              font-weight: 500;
              white-space: nowrap;
          `;
          
          leftContent.appendChild(productName);
          leftContent.appendChild(timeInfo);
          li.appendChild(leftContent);
          li.appendChild(statusBadge);
          
          li.dataset.name = item.name.toLowerCase();
          li.dataset.state = item.state.toLowerCase();
          
          // Hover effect
          li.addEventListener('mouseenter', () => {
              li.style.background = 'rgba(44, 44, 46, 0.8)';
              li.style.transform = 'translateY(-1px)';
          });
          
          li.addEventListener('mouseleave', () => {
              li.style.background = 'rgba(44, 44, 46, 0.6)';
              li.style.transform = 'translateY(0)';
          });
          
          // Swipe to delete functionality
          let startX = 0;
          let currentX = 0;
          let isSwiping = false;
          let deleteMode = false;

          li.addEventListener('touchstart', (e) => {
              startX = e.touches[0].clientX;
              isSwiping = true;
              deleteMode = false;
          });

          li.addEventListener('touchmove', (e) => {
              if (!isSwiping) return;
              currentX = e.touches[0].clientX;
              const diff = currentX - startX;
              
              if (diff < 0) { // Swipe left
                  li.style.transform = `translateX(${diff}px)`;
                  li.style.opacity = 1 + (diff / 200);
                  
                  // Show delete indicator in Apple style
                  if (diff < -50 && !deleteMode) {
                      deleteMode = true;
                      const deleteIndicator = document.createElement('div');
                      deleteIndicator.innerHTML = '<i class="fas fa-trash"></i> Elimina';
                      deleteIndicator.style.cssText = `
                          position: absolute;
                          right: -100px;
                          top: 50%;
                          transform: translateY(-50%);
                          background: rgba(255, 59, 48, 0.95);
                          backdrop-filter: blur(10px);
                          color: white;
                          padding: 0.6rem 1.2rem;
                          border-radius: 12px;
                          font-size: 0.85rem;
                          font-weight: 600;
                          white-space: nowrap;
                          display: flex;
                          align-items: center;
                          gap: 0.5rem;
                          box-shadow: 0 4px 12px rgba(255, 59, 48, 0.3);
                          animation: slideInRight 0.2s ease-out;
                      `;
                      li.appendChild(deleteIndicator);
                  }
              }
          });

          li.addEventListener('touchend', () => {
              if (!isSwiping) return;
              isSwiping = false;
              
              const diff = currentX - startX;
              if (diff < -100) { // Swipe left enough to delete
                  li.style.transform = 'translateX(-100%)';
                  li.style.opacity = 0;
                  setTimeout(() => {
                      if (li.parentNode) {
                          li.parentNode.removeChild(li);
                      }
                      // Remove from scanHistory array
                      const index = scanHistory.findIndex(scanItem => 
                          scanItem.name === item.name && scanItem.time === item.time
                      );
                      if (index > -1) {
                          scanHistory.splice(index, 1);
                          // Update localStorage
                          localStorage.setItem('scanHistory', JSON.stringify(scanHistory));
                      }
                  }, 300);
              } else {
                  li.style.transform = 'translateX(0)';
                  li.style.opacity = 1;
                  // Remove delete indicator
                  const deleteIndicator = li.querySelector('div[style*="background: rgba(255, 59, 48"]');
                  if (deleteIndicator) {
                      deleteIndicator.remove();
                  }
              }
          });
          
          historyList.appendChild(li);
      });
  }
  
  // Carica lo storico all'avvio
  document.addEventListener('DOMContentLoaded', loadScanHistory);
  
  function addScanToHistory(product) {
      const historyContainer = document.getElementById('scan-history');
      const historyList = document.getElementById('scan-history-list');
      if (!historyContainer || !historyList) return;

      // Aggiungi nuovo scan all'inizio
      scanHistory.unshift({
          name: product.name || 'Prodotto sconosciuto',
          state: product.out ? 'Fuori' : 'In',
          time: new Date().toLocaleTimeString(),
          category: 'Eventi'
      });

      // Mantieni solo gli ultimi 500 prodotti
      if (scanHistory.length > 500) {
          scanHistory = scanHistory.slice(0, 500);
      }

      // Salva nel localStorage
      localStorage.setItem('scanHistory', JSON.stringify(scanHistory));

      // Aggiorna lista: mostra solo le ultime 50
      historyList.innerHTML = '';
      const latest = scanHistory.slice(0, 50);
      latest.forEach(item => {
          const li = document.createElement('div');
          li.style.cssText = `
              background: rgba(44, 44, 46, 0.6);
              border: 1px solid rgba(255, 255, 255, 0.05);
              border-radius: 12px;
              padding: 1rem;
              margin-bottom: 0.8rem;
              display: flex;
              justify-content: space-between;
              align-items: center;
              transition: all 0.2s ease;
              cursor: pointer;
              position: relative;
              overflow: hidden;
          `;
          
          const leftContent = document.createElement('div');
          leftContent.style.cssText = `
              display: flex;
              flex-direction: column;
              gap: 0.3rem;
          `;
          
          const productName = document.createElement('div');
          productName.textContent = item.name;
          productName.style.cssText = `
              font-weight: 600;
              color: white;
              font-size: 0.95rem;
          `;
          
          const timeInfo = document.createElement('div');
          timeInfo.textContent = item.time;
          timeInfo.style.cssText = `
              color: #999;
              font-size: 0.8rem;
          `;
          
          const statusBadge = document.createElement('div');
          statusBadge.textContent = item.state;
          statusBadge.style.cssText = `
              background: ${item.state === 'In' ? 'rgba(52, 199, 89, 0.2)' : 'rgba(255, 59, 48, 0.2)'};
              color: ${item.state === 'In' ? '#34c759' : '#ff3b30'};
              padding: 0.4rem 0.8rem;
              border-radius: 8px;
              font-size: 0.75rem;
              font-weight: 500;
              white-space: nowrap;
          `;
          
          leftContent.appendChild(productName);
          leftContent.appendChild(timeInfo);
          li.appendChild(leftContent);
          li.appendChild(statusBadge);
          
          li.dataset.name = item.name.toLowerCase();
          li.dataset.state = item.state.toLowerCase();
          
          // Hover effect
          li.addEventListener('mouseenter', () => {
              li.style.background = 'rgba(44, 44, 46, 0.8)';
              li.style.transform = 'translateY(-1px)';
          });
          
          li.addEventListener('mouseleave', () => {
              li.style.background = 'rgba(44, 44, 46, 0.6)';
              li.style.transform = 'translateY(0)';
          });
          
          // Swipe to delete functionality for history items
          let startX = 0;
          let currentX = 0;
          let isSwiping = false;
          let deleteMode = false;

          li.addEventListener('touchstart', (e) => {
              startX = e.touches[0].clientX;
              isSwiping = true;
              deleteMode = false;
          });

          li.addEventListener('touchmove', (e) => {
              if (!isSwiping) return;
              currentX = e.touches[0].clientX;
              const diff = currentX - startX;
              
              if (diff < 0) { // Swipe left
                  li.style.transform = `translateX(${diff}px)`;
                  li.style.opacity = 1 + (diff / 200);
                  
                  // Show delete indicator in Apple style
                  if (diff < -50 && !deleteMode) {
                      deleteMode = true;
                      const deleteIndicator = document.createElement('div');
                      deleteIndicator.innerHTML = '<i class="fas fa-trash"></i> Elimina';
                      deleteIndicator.style.cssText = `
                          position: absolute;
                          right: -100px;
                          top: 50%;
                          transform: translateY(-50%);
                          background: rgba(255, 59, 48, 0.95);
                          backdrop-filter: blur(10px);
                          color: white;
                          padding: 0.6rem 1.2rem;
                          border-radius: 12px;
                          font-size: 0.85rem;
                          font-weight: 600;
                          white-space: nowrap;
                          display: flex;
                          align-items: center;
                          gap: 0.5rem;
                          box-shadow: 0 4px 12px rgba(255, 59, 48, 0.3);
                          animation: slideInRight 0.2s ease-out;
                      `;
                      li.appendChild(deleteIndicator);
                  }
              }
          });

          li.addEventListener('touchend', () => {
              if (!isSwiping) return;
              isSwiping = false;
              
              const diff = currentX - startX;
              if (diff < -100) { // Swipe left enough to delete
                  li.style.transform = 'translateX(-100%)';
                  li.style.opacity = 0;
                  setTimeout(() => {
                      if (li.parentNode) {
                          li.parentNode.removeChild(li);
                      }
                      // Remove from scanHistory array
                      const index = scanHistory.findIndex(scanItem => 
                          scanItem.name === item.name && scanItem.time === item.time
                      );
                      if (index > -1) {
                          scanHistory.splice(index, 1);
                          // Update localStorage
                          localStorage.setItem('scanHistory', JSON.stringify(scanHistory));
                      }
                  }, 300);
              } else {
                  li.style.transform = 'translateX(0)';
                  li.style.opacity = 1;
                  // Remove delete indicator
                  const deleteIndicator = li.querySelector('div[style*="background: rgba(255, 59, 48"]');
                  if (deleteIndicator) {
                      deleteIndicator.remove();
                  }
              }
          });
          
          historyList.appendChild(li);
      });
  }

  document.getElementById('scan-filter')?.addEventListener('input', e => {
      const term = e.target.value.toLowerCase();
      const items = document.querySelectorAll('#scan-history-list div');
      items.forEach(li => {
          const name = li.dataset.name || '';
          const state = li.dataset.state || '';
          li.style.display = (name.includes(term) || state.includes(term)) ? 'flex' : 'none';
      });
  });

  document.getElementById('export-history')?.addEventListener('click', () => {
      if (scanHistory.length === 0) return;
      const csvContent = "data:text/csv;charset=utf-8,"
          + "Ora,Prodotto,Stato\n"
          + scanHistory.map(row => `${row.time},${row.name},${row.state}`).join("\n");

      const encodedUri = encodeURI(csvContent);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "storico_scansioni.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
  });

  document.getElementById('clear-history')?.addEventListener('click', () => {
      if (scanHistory.length === 0) return;
      
      if (confirm('Sei sicuro di voler svuotare tutto lo storico? Questa azione non pu√≤ essere annullata.')) {
          scanHistory = [];
          localStorage.setItem('scanHistory', JSON.stringify(scanHistory));
          document.getElementById('scan-history-list').innerHTML = '';
      }
  });
</script>


<script>



    // Funzione per resettare il subtext (messaggio NFC)
    function resetSubtext() {
        subtext.textContent = "Clicca per la lettura";
        subtext.classList.remove("clicked");
    }

    // Funzione per mostrare il pulsante "Annulla" (per multiscan)
    function renderCancelButton() {
        subtext.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; gap: 1.5rem;">
                <span id="scan-mode-text" style="font-size: 1.4rem; font-weight: 500; opacity: 0.6; letter-spacing: -0.04em; color: #ffffff;"></span>
                <button id="cancel-scan-inline" style="font-size: 1.2rem; font-weight: 500; padding: 0.7rem 1.6rem; border-radius: 12px; background-color: var(--color-error); border: none; color: white; cursor: pointer; transition: background 0.3s ease;" tabindex="0">
                    Annulla
                </button>
            </div>`;
        const scanText = document.getElementById('scan-mode-text');
        if (scanText) {
            scanText.textContent = multiScanMode ? "üåÄ Lettura multipla in corso..." : "üåÄ Lettura in corso...";
        }
        const cancelBtn = document.getElementById('cancel-scan-inline');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                stopNfc();
            });
        }
    }

    // Funzioni per animazione pulsazione NFC
    function startPulseAnimation() {
        document.querySelector('.nfc-icon')?.classList.add('is-pulsing');
    }

    function stopPulseAnimation() {
        const icon = document.querySelector('.nfc-icon');
        if (icon) {
            icon.classList.remove('is-pulsing');
            icon.style.transform = 'scale(1)';
            void icon.offsetWidth;
        }
    }

    // Funzione per mostrare l'animazione 3D del tag in stile Apple con spin spettacolare
    function showTagly3D() {
        const taglyModel = document.getElementById('tagly-3d');
        const nfcBtn = document.getElementById('nfc-button');
        const subtext = document.getElementById('nfc-subtext');
        
        // Nascondi il pulsante NFC e il testo
        if (nfcBtn) nfcBtn.style.display = 'none';
        if (subtext) subtext.style.display = 'none';
        
        // Crea overlay che nasconde completamente lo sfondo
        const overlay = document.createElement('div');
        overlay.className = 'apple-3d-overlay';
        overlay.style.background = 'rgba(0, 0, 0, 0.95)';
        overlay.style.position = 'fixed';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.width = '100%';
        overlay.style.height = '100%';
        overlay.style.zIndex = '9998';
        overlay.style.pointerEvents = 'none';
        overlay.style.animation = 'appleOverlayFade 5.5s ease-out forwards';
        document.body.appendChild(overlay);
        

        
        // Crea particelle migliorate
        const particlesContainer = document.createElement('div');
        particlesContainer.className = 'apple-3d-particles';
        document.body.appendChild(particlesContainer);
        
        // Genera pi√π particelle con effetti migliorati
        for (let i = 0; i < 30; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 3 + 's';
            particle.style.animationDuration = (2.5 + Math.random() * 3) + 's';
            particle.style.background = `rgba(${255}, ${255}, ${255}, ${0.6 + Math.random() * 0.4})`;
            particle.style.boxShadow = `0 0 ${10 + Math.random() * 20}px rgba(255, 255, 255, 0.8)`;
            particle.style.zIndex = '10000';
            particlesContainer.appendChild(particle);
        }
        
        // Animazione di entrata spettacolare con spin del modello 3D
        setTimeout(() => {
            taglyModel.style.opacity = '1';
            taglyModel.style.pointerEvents = 'auto';
            taglyModel.style.transform = 'translate(-50%, -50%) scale(1.2)';
            taglyModel.style.transition = 'opacity 1.5s ease, transform 0.5s ease';
            
            // Controlla l'auto-rotate per creare lo spin
            function startSpin() {
                if (taglyModel.ready) {
                    // Spin veloce iniziale (1 giro al secondo)
                    taglyModel.autoRotate = true;
                    taglyModel.rotationPerSecond = '360deg';
                    
                    // Dopo 0.8 secondi, rallenta
                    setTimeout(() => {
                        taglyModel.rotationPerSecond = '120deg';
                    }, 800);
                    
                    // Dopo 2.3 secondi, ferma la rotazione
                    setTimeout(() => {
                        taglyModel.autoRotate = false;
                    }, 2300);
                } else {
                    // Se non √® pronto, riprova dopo 100ms
                    setTimeout(startSpin, 100);
                }
            }
            
            startSpin();
        }, 300);
        
        // Nascondi tutto dopo che il tag √® completamente scomparso
        setTimeout(() => {
            hideTagly3D();
        }, 5500);
    }

    // Funzione per nascondere l'animazione 3D del tag
    function hideTagly3D() {
        const taglyModel = document.getElementById('tagly-3d');
        const nfcBtn = document.getElementById('nfc-button');
        const subtext = document.getElementById('nfc-subtext');
        
        // Nascondi il modello 3D
        if (taglyModel) {
            taglyModel.style.opacity = '0';
            taglyModel.style.pointerEvents = 'none';
            taglyModel.style.transform = 'translate(-50%, -50%) scale(0.7)';
        }
        
        // Mostra il pulsante NFC e il testo
        if (nfcBtn) nfcBtn.style.display = '';
        if (subtext) subtext.style.display = '';
        
        // Rimuovi tutti gli elementi Apple-style
        const overlay = document.querySelector('.apple-3d-overlay');
        const particles = document.querySelector('.apple-3d-particles');
        
        if (overlay) overlay.remove();
        if (particles) particles.remove();
    }

    // Funzione per debuggare il modello 3D
    function debug3DModel() {
        const taglyModel = document.getElementById('tagly-3d');
        console.log('=== DEBUG MODELLO 3D ===');
        console.log('Elemento model-viewer:', taglyModel);
        
        if (taglyModel) {
            console.log('Src:', taglyModel.src);
            console.log('Model loaded:', taglyModel.modelIsVisible);
            console.log('Ready:', taglyModel.ready);
            
            // Verifica se il file esiste
            fetch('{{ asset("models/tagly.glb") }}', { method: 'HEAD' })
                .then(response => {
                    console.log('File status:', response.status);
                    console.log('File headers:', response.headers);
                    if (response.ok) {
                        console.log('‚úÖ File tagly.glb trovato e accessibile');
                    } else {
                        console.log('‚ùå File tagly.glb non trovato');
                    }
                })
                .catch(error => {
                    console.log('‚ùå Errore nel caricamento del file:', error);
                });
            
            // Mostra il modello per debug
            taglyModel.style.opacity = '1';
            taglyModel.style.pointerEvents = 'auto';
            taglyModel.style.transform = 'translate(-50%, -50%) scale(1)';
            
            // Nascondi dopo 5 secondi
            setTimeout(() => {
                taglyModel.style.opacity = '0';
                taglyModel.style.pointerEvents = 'none';
                taglyModel.style.transform = 'translate(-50%, -50%) scale(0.7)';
            }, 5000);
        } else {
            console.log('‚ùå Elemento model-viewer non trovato');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const audio = new Audio('{{ asset("sounds/notification.wav") }}');
        const button = document.getElementById('nfc-button');
        if (button) {
            button.addEventListener('click', () => {
                if (!isNfcActive) {
                    isNfcActive = true;
                    startNfc();
                    startPulseAnimation();
                } else {
                    stopNfc();
                }
            });
        }

        const closeBtn = document.getElementById('close-product-info');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                resetProductInfo();
            });
        }
        
        // Dev Mode functionality
        const btnDevMode = document.getElementById('btn-dev-mode');
        const devModeBox = document.getElementById('dev-mode-box');
        const closeDevMode = document.getElementById('close-dev-mode');
        const testAnimationsBtn = document.getElementById('test-animations-btn');
        const debugModelBtn = document.getElementById('debug-model-btn');
        const testTransitionsBtn = document.getElementById('test-transitions-btn');
        
        if (btnDevMode && devModeBox) {
            btnDevMode.addEventListener('click', () => {
                const isHidden = devModeBox.style.display === 'none' || !devModeBox.style.display;
                devModeBox.style.display = isHidden ? 'block' : 'none';
                btnDevMode.classList.toggle('btn-dev-active', isHidden);
            });
        }
        
        if (closeDevMode) {
            closeDevMode.addEventListener('click', () => {
                devModeBox.style.display = 'none';
                btnDevMode.classList.remove('btn-dev-active');
            });
        }
        
        if (testAnimationsBtn) {
            testAnimationsBtn.addEventListener('click', () => {
                showTagly3D();
            });
        }
        
        if (debugModelBtn) {
            debugModelBtn.addEventListener('click', () => {
                debug3DModel();
            });
        }
        
        if (testTransitionsBtn) {
            testTransitionsBtn.addEventListener('click', () => {
                if (typeof window.showNotification === 'function') {
                    window.showNotification('Test Transizioni - Funzionalit√† in sviluppo', 'info', 3000);
                } else {
                    alert('Test Transizioni - Funzionalit√† in sviluppo');
                }
            });
        }

    });

</script>

<script>
// Nuovi bottoni flottanti: multiscan & history
const btnMulti = document.getElementById('btn-multiscan');
const btnHistory = document.getElementById('btn-history');

btnMulti.addEventListener('click', () => {
    multiScanMode = !multiScanMode;
    
    if (multiScanMode) {
        // Attiva multiscan
        startPulseAnimation();
        btnMulti.classList.add('btn-multiscan-active');
        if (!isNfcActive) startNfc();
    } else {
        // Disattiva multiscan
        stopPulseAnimation();
        btnMulti.classList.remove('btn-multiscan-active');
        stopNfc();
    }
});

btnHistory.addEventListener('click', () => {
    const historyBox = document.getElementById('scan-history');
    const isHidden = historyBox.style.display === 'none' || !historyBox.style.display;
    historyBox.style.display = isHidden ? 'block' : 'none';

    // Toggle button style
    btnHistory.classList.toggle('btn-history-active', isHidden);
});
</script>

<!-- Sistema di Sincronizzazione Multi-Dispositivo -->
<script>
class MultiDeviceSync {
    constructor() {
        this.deviceId = this.getOrCreateDeviceId();
        this.lastSync = localStorage.getItem('lastSync') || null;
        this.syncInterval = null;
        this.isOnline = navigator.onLine;
        this.pendingScans = JSON.parse(localStorage.getItem('pendingScans') || '[]');
        
        this.initialize();
    }

    initialize() {
        this.updateDeviceIdDisplay();
        this.updateLastSyncTime();
        this.updateSyncState();
        this.loadActiveDevices();
        this.startAutoSync();
        this.setupEventListeners();
        this.log('Sistema di sincronizzazione inizializzato');
    }

    getOrCreateDeviceId() {
        let deviceId = localStorage.getItem('deviceId');
        if (!deviceId) {
            deviceId = 'device_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('deviceId', deviceId);
        }
        return deviceId;
    }

    getDeviceInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            screenResolution: `${screen.width}x${screen.height}`,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone
        };
    }

    async syncScanData(scanData) {
        try {
            const syncData = {
                device_id: this.deviceId,
                nfc_id: scanData.nfcId || '',
                product_name: scanData.productName || '',
                product_status: scanData.productStatus || 'unknown',
                scan_type: scanData.scanType || 'read',
                device_info: JSON.stringify(this.getDeviceInfo()),
                location: scanData.location || 'unknown',
                timestamp: new Date().toISOString()
            };

            const response = await fetch('/api/nfc/sync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(syncData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            this.log(`Scansione sincronizzata: ${result.message}`);
            this.updateLastSyncTime();
            this.updateSyncState('Sincronizzato');
            
            return result;

        } catch (error) {
            console.error('Errore sincronizzazione:', error);
            this.log(`Errore sincronizzazione: ${error.message}`);
            this.updateSyncState('Errore');
            
            // Salva per sincronizzazione successiva
            this.pendingScans.push(scanData);
            localStorage.setItem('pendingScans', JSON.stringify(this.pendingScans));
            
            return { error: error.message };
        }
    }

    async checkForUpdates() {
        try {
            const response = await fetch(`/api/nfc/sync/status?device_id=${this.deviceId}&last_sync=${this.lastSync || ''}`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.scans && result.scans.length > 0) {
                this.log(`Ricevuti ${result.scans.length} aggiornamenti da altri dispositivi`);
                this.processIncomingScans(result.scans);
                
                // Conferma ricezione
                await this.acknowledgeScans(result.scans.map(s => s.id));
            }

            return result;

        } catch (error) {
            console.error('Errore controllo aggiornamenti:', error);
            this.log(`Errore controllo aggiornamenti: ${error.message}`);
            return { error: error.message };
        }
    }

    async loadActiveDevices() {
        try {
            const response = await fetch('/api/nfc/sync/devices');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            this.displayActiveDevices(result.devices || []);

        } catch (error) {
            console.error('Errore caricamento dispositivi:', error);
            this.log(`Errore caricamento dispositivi: ${error.message}`);
        }
    }

    displayActiveDevices(devices) {
        const devicesList = document.getElementById('active-devices-list');
        if (!devicesList) return;

        if (devices.length === 0) {
            devicesList.innerHTML = '<div style="text-align: center; color: #666; font-size: 0.9rem; padding: 1rem;">Nessun dispositivo attivo</div>';
            return;
        }

        devicesList.innerHTML = '';
        devices.forEach(device => {
            const deviceDiv = document.createElement('div');
            deviceDiv.style.cssText = `
                background: rgba(44, 44, 46, 0.6);
                border: 1px solid rgba(255, 255, 255, 0.05);
                border-radius: 12px;
                padding: 0.75rem;
                margin-bottom: 0.5rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
            `;

            const deviceInfo = document.createElement('div');
            deviceInfo.innerHTML = `
                <div style="color: white; font-size: 0.85rem; font-weight: 500;">${device.device_info || 'Dispositivo'}</div>
                <div style="color: #999; font-size: 0.75rem;">Ultima attivit√†: ${new Date(device.last_activity).toLocaleTimeString()}</div>
            `;

            const statusIndicator = document.createElement('div');
            statusIndicator.style.cssText = `
                width: 8px;
                height: 8px;
                border-radius: 50%;
                background: #34c759;
                animation: pulse 2s infinite;
            `;

            deviceDiv.appendChild(deviceInfo);
            deviceDiv.appendChild(statusIndicator);
            devicesList.appendChild(deviceDiv);
        });
    }

    async acknowledgeScans(scanIds) {
        try {
            const response = await fetch('/api/nfc/sync/ack', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ scan_ids: scanIds })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            this.log(`Confermati ${result.message}`);

        } catch (error) {
            console.error('Errore conferma scansioni:', error);
            this.log(`Errore conferma: ${error.message}`);
        }
    }

    processIncomingScans(scans) {
        scans.forEach(scan => {
            // Aggiorna lo storico locale
            this.addScanToLocalHistory({
                name: scan.product_name,
                state: scan.product_status === 'in' ? 'In' : 'Fuori',
                time: new Date(scan.timestamp).toLocaleTimeString(),
                category: 'Sincronizzato',
                device: scan.device_id
            });

            // Mostra notifica
            if (typeof window.showNotification === 'function') {
                window.showNotification(
                    `Nuova scansione da ${scan.device_id}: ${scan.product_name}`,
                    'info',
                    3000
                );
            }
        });
    }

    addScanToLocalHistory(scanData) {
        // Aggiungi alla cronologia locale
        const historyList = document.getElementById('scan-history-list');
        if (!historyList) return;

        const li = document.createElement('div');
        li.style.cssText = `
            background: rgba(52, 199, 89, 0.1);
            border: 1px solid rgba(52, 199, 89, 0.3);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 0.8rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        `;

        const leftContent = document.createElement('div');
        leftContent.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 0.3rem;
        `;

        const productName = document.createElement('div');
        productName.textContent = scanData.name;
        productName.style.cssText = `
            font-weight: 600;
            color: white;
            font-size: 0.95rem;
        `;

        const timeInfo = document.createElement('div');
        timeInfo.textContent = `${scanData.time} (${scanData.device})`;
        timeInfo.style.cssText = `
            color: #34c759;
            font-size: 0.8rem;
        `;

        const statusBadge = document.createElement('div');
        statusBadge.textContent = scanData.state;
        statusBadge.style.cssText = `
            background: ${scanData.state === 'In' ? 'rgba(52, 199, 89, 0.2)' : 'rgba(255, 59, 48, 0.2)'};
            color: ${scanData.state === 'In' ? '#34c759' : '#ff3b30'};
            padding: 0.4rem 0.8rem;
            border-radius: 8px;
            font-size: 0.75rem;
            font-weight: 500;
            white-space: nowrap;
        `;

        leftContent.appendChild(productName);
        leftContent.appendChild(timeInfo);
        li.appendChild(leftContent);
        li.appendChild(statusBadge);
        historyList.appendChild(li);
    }

    startAutoSync() {
        // Sincronizzazione automatica ogni 30 secondi
        this.syncInterval = setInterval(async () => {
            if (this.isOnline) {
                await this.checkForUpdates();
                await this.syncPendingScans();
            }
        }, 30000);

        this.log('Sincronizzazione automatica avviata (30s)');
    }

    async syncPendingScans() {
        if (this.pendingScans.length === 0) return;

        this.log(`Sincronizzazione di ${this.pendingScans.length} scansioni in attesa...`);
        
        const successfulScans = [];
        
        for (const scan of this.pendingScans) {
            try {
                const result = await this.syncScanData(scan);
                if (!result.error) {
                    successfulScans.push(scan);
                }
            } catch (error) {
                this.log(`Errore sincronizzazione scansione: ${error.message}`);
            }
        }

        // Rimuovi le scansioni sincronizzate con successo
        this.pendingScans = this.pendingScans.filter(scan => 
            !successfulScans.some(s => s.nfcId === scan.nfcId)
        );
        
        localStorage.setItem('pendingScans', JSON.stringify(this.pendingScans));
        
        if (successfulScans.length > 0) {
            this.log(`${successfulScans.length} scansioni sincronizzate con successo`);
        }
    }

    updateDeviceIdDisplay() {
        const deviceIdDisplay = document.getElementById('device-id-display');
        if (deviceIdDisplay) {
            deviceIdDisplay.textContent = this.deviceId.substring(0, 20) + '...';
        }
    }

    updateLastSyncTime() {
        const lastSyncTime = document.getElementById('last-sync-time');
        if (lastSyncTime) {
            if (this.lastSync) {
                const lastSyncDate = new Date(this.lastSync);
                lastSyncTime.textContent = lastSyncDate.toLocaleTimeString();
            } else {
                lastSyncTime.textContent = 'Mai';
            }
        }
    }

    updateSyncState(state = 'In attesa') {
        const syncState = document.getElementById('sync-state');
        const syncIndicator = document.getElementById('sync-indicator');
        
        if (syncState) {
            syncState.textContent = state;
        }
        
        if (syncIndicator) {
            if (state === 'Sincronizzato') {
                syncIndicator.style.background = '#34c759';
                syncIndicator.style.animation = 'none';
            } else if (state === 'Errore') {
                syncIndicator.style.background = '#ff3b30';
                syncIndicator.style.animation = 'pulse 1s infinite';
            } else {
                syncIndicator.style.background = '#ff9500';
                syncIndicator.style.animation = 'pulse 2s infinite';
            }
        }
    }

    log(message) {
        const syncLog = document.getElementById('sync-log');
        if (!syncLog) return;

        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.style.cssText = `
            color: #34c759;
            margin-bottom: 0.25rem;
            font-size: 0.75rem;
        `;
        logEntry.textContent = `[${timestamp}] ${message}`;

        syncLog.appendChild(logEntry);
        syncLog.scrollTop = syncLog.scrollHeight;

        // Mantieni solo gli ultimi 50 log
        while (syncLog.children.length > 50) {
            syncLog.removeChild(syncLog.firstChild);
        }
    }

    setupEventListeners() {
        // Event listener per cambiamenti di connessione
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.log('Connessione ripristinata');
            this.updateSyncState('Online');
            this.syncPendingScans();
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
            this.log('Connessione persa');
            this.updateSyncState('Offline');
        });

        // Pulsante sincronizzazione manuale
        const manualSyncBtn = document.getElementById('manual-sync');
        if (manualSyncBtn) {
            manualSyncBtn.addEventListener('click', async () => {
                manualSyncBtn.disabled = true;
                manualSyncBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sincronizzando...';
                
                try {
                    await this.checkForUpdates();
                    await this.syncPendingScans();
                    this.log('Sincronizzazione manuale completata');
                } catch (error) {
                    this.log(`Errore sincronizzazione manuale: ${error.message}`);
                } finally {
                    manualSyncBtn.disabled = false;
                    manualSyncBtn.innerHTML = '<i class="fas fa-sync"></i> Sincronizza';
                }
            });
        }

        // Pulsante statistiche
        const viewStatsBtn = document.getElementById('view-sync-stats');
        if (viewStatsBtn) {
            viewStatsBtn.addEventListener('click', () => {
                this.showSyncStats();
            });
        }

        // Pulsante chiudi
        const closeBtn = document.getElementById('close-sync-box');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                document.getElementById('sync-box').style.display = 'none';
                btnSync.classList.remove('btn-sync-active');
            });
        }
    }

    async showSyncStats() {
        try {
            const response = await fetch(`/api/nfc/sync/status?device_id=${this.deviceId}`);
            const result = await response.json();
            
            const stats = {
                scansRicevute: result.count || 0,
                scansInAttesa: this.pendingScans.length,
                ultimaSincronizzazione: this.lastSync ? new Date(this.lastSync).toLocaleString() : 'Mai',
                statoConnessione: this.isOnline ? 'Online' : 'Offline'
            };

            let statsMessage = 'üìä **Statistiche Sincronizzazione**\n\n';
            statsMessage += `üì± Scansioni ricevute: ${stats.scansRicevute}\n`;
            statsMessage += `‚è≥ Scansioni in attesa: ${stats.scansInAttesa}\n`;
            statsMessage += `üïê Ultima sincronizzazione: ${stats.ultimaSincronizzazione}\n`;
            statsMessage += `üåê Stato connessione: ${stats.statoConnessione}`;

            if (typeof window.showNotification === 'function') {
                window.showNotification(statsMessage, 'info', 8000);
            } else {
                alert(statsMessage);
            }

        } catch (error) {
            this.log(`Errore caricamento statistiche: ${error.message}`);
        }
    }

    destroy() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
        }
        this.log('Sistema di sincronizzazione disattivato');
    }
}

// Inizializza il sistema di sincronizzazione
let multiDeviceSync = null;

function initializeSyncSystem() {
    if (!multiDeviceSync) {
        multiDeviceSync = new MultiDeviceSync();
    }
}

// Integra la sincronizzazione con le scansioni NFC esistenti
function updateProductInfo(p) {
    // Codice esistente...
    productName.textContent = p.name;
    const productImage = document.getElementById('product-image');
    if (p.imageUrl) {
        productImage.src = p.imageUrl;
        productImage.classList.add('visible');
        productImage.classList.remove('hidden');
    } else {
        productImage.src = '';
        productImage.classList.remove('visible');
        productImage.classList.add('hidden');
    }
    const stateText = p.out ? 'Fuori dal magazzino' : 'In magazzino';
    productState.textContent = stateText;
    productState.className = 'status-pill ' + (p.out ? 'out-warehouse' : 'in-warehouse');
    productInfo.classList.remove('hidden');
    productInfo.classList.add('visible');

    productInfo.classList.remove('status-glow-success', 'status-glow-error');
    void productInfo.offsetWidth;
    productInfo.classList.add(p.out ? 'status-glow-error' : 'status-glow-success');

    addScanToHistory(p);
    
    // Sincronizza con altri dispositivi
    if (multiDeviceSync) {
        multiDeviceSync.syncScanData({
            nfcId: p.nfcId || 'unknown',
            productName: p.name,
            productStatus: p.out ? 'out' : 'in',
            scanType: 'read',
            location: 'magazzino'
        });
    }
    
    // Mostra notifica
    if (typeof window.showNotification === 'function') {
        const status = p.out ? 'uscito' : 'entrato';
        window.showNotification(`${p.name} √® ${status} dal magazzino`, p.out ? 'warning' : 'success', 4000);
    }
}
</script>


<script>

    const loopAudio = new Audio('{{ asset("sounds/progress_loop.wav") }}');
    loopAudio.loop = true;

    const notificationAudio = new Audio('{{ asset("sounds/notification.wav") }}');
    const reversedAudio = new Audio('{{ asset("sounds/notification_reversed.wav") }}');

    let isNfcActive = false;

</script>

{% endblock %}
