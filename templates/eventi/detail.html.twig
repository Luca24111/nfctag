{# templates/eventi/detail.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Dettagli Evento{% endblock %}

{% block body %}
<style>
  body {
    background-color: var(--bg-primary);
    min-height: 100vh;
    padding: 0;
    margin: 0;
  }
  
  .page-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  /* Header Evento */
  .event-header {
    background: rgba(28, 28, 30, 0.95);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 24px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
    position: relative;
    overflow: hidden;
  }
  
  .event-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  }
  
  .event-title {
    font-size: 2.4rem;
    font-weight: 700;
    color: #ffffff;
    margin: 0 0 1rem 0;
    letter-spacing: -0.04em;
    line-height: 1.1;
  }
  
  .event-meta {
    display: flex;
    gap: 2rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }
  
  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #999999;
    font-size: 1rem;
    font-weight: 500;
  }
  
  .meta-item i {
    font-size: 1.1rem;
    opacity: 0.7;
  }
  
  .event-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }
  
  .action-btn {
    width: 48px;
    height: 48px;
    border-radius: 14px;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }
  
  .action-btn.edit {
    background: rgba(0, 122, 255, 0.15);
    border: 1px solid rgba(0, 122, 255, 0.2);
    color: #007aff;
  }
  
  .action-btn.edit:hover {
    background: rgba(0, 122, 255, 0.25);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 122, 255, 0.3);
  }
  
  .action-btn.delete {
    background: rgba(255, 59, 48, 0.15);
    border: 1px solid rgba(255, 59, 48, 0.2);
    color: #ff3b30;
  }
  
  .action-btn.delete:hover {
    background: rgba(255, 59, 48, 0.25);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(255, 59, 48, 0.3);
  }
  
  /* Sezione Prodotti */
  .products-section {
    background: rgba(28, 28, 30, 0.95);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 24px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
  }
  
  .section-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }
  
  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #ffffff;
    margin: 0;
    letter-spacing: -0.04em;
  }
  
  .products-count {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 0.5rem 1rem;
    color: #999999;
    font-size: 0.9rem;
    font-weight: 500;
  }
  
  .products-grid {
    display: grid;
    gap: 1rem;
  }
  
  .product-item {
    background: rgba(44, 44, 46, 0.6);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 16px;
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .product-item:hover {
    background: rgba(44, 44, 46, 0.8);
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  }
  
  .product-image {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    object-fit: cover;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    flex-shrink: 0;
  }
  
  .product-info {
    flex: 1;
    min-width: 0;
  }
  
  .product-name {
    font-size: 1rem;
    font-weight: 600;
    color: #ffffff;
    margin: 0 0 0.25rem 0;
    letter-spacing: -0.02em;
  }
  
  .product-status {
    font-size: 0.85rem;
    color: #999999;
    font-weight: 500;
  }
  
  .product-status.in-stock {
    color: #34c759;
  }
  
  .product-status.out-stock {
    color: #ff3b30;
  }
  
  .remove-btn {
    width: 36px;
    height: 36px;
    border-radius: 10px;
    border: none;
    background: rgba(255, 59, 48, 0.15);
    color: #ff3b30;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .remove-btn:hover {
    background: rgba(255, 59, 48, 0.25);
    transform: scale(1.1);
  }
  
  /* Sezione Azioni */
  .actions-section {
    background: rgba(28, 28, 30, 0.95);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 24px;
    padding: 2rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
  }
  
  .actions-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    align-items: center;
  }
  
  .primary-action {
    background: linear-gradient(135deg, #34c759 0%, #30d158 100%);
    border: none;
    border-radius: 18px;
    color: white;
    font-size: 1.1rem;
    font-weight: 600;
    padding: 1.2rem 2.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 12px 32px rgba(52, 199, 89, 0.3);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    letter-spacing: -0.04em;
    min-width: 200px;
    justify-content: center;
  }
  
  .primary-action:hover {
    transform: translateY(-3px);
    box-shadow: 0 16px 40px rgba(52, 199, 89, 0.4);
  }
  
  .primary-action:active {
    transform: translateY(-1px);
    box-shadow: 0 8px 24px rgba(52, 199, 89, 0.3);
  }
  
  .secondary-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #999999;
    font-size: 0.95rem;
  }
  
  .secondary-action {
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 14px;
    color: #999999;
    font-size: 0.9rem;
    font-weight: 500;
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .secondary-action:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.3);
    color: #cccccc;
  }
  
  .secondary-action.active {
    background: rgba(0, 122, 255, 0.15);
    border-color: rgba(0, 122, 255, 0.3);
    color: #007aff;
    animation: pulseBlue 2s infinite;
  }
  
  @keyframes pulseBlue {
    0% { box-shadow: 0 0 20px rgba(0, 122, 255, 0.6), 0 4px 12px rgba(0, 0, 0, 0.2); }
    50% { box-shadow: 0 0 30px rgba(0, 122, 255, 0.8), 0 4px 12px rgba(0, 0, 0, 0.2); }
    100% { box-shadow: 0 0 20px rgba(0, 122, 255, 0.6), 0 4px 12px rgba(0, 0, 0, 0.2); }
  }
  
  /* Feedback */
  .feedback {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: rgba(28, 28, 30, 0.95);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 16px;
    padding: 1rem 1.5rem;
    color: #ffffff;
    font-size: 0.9rem;
    font-weight: 500;
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
    transform: translateX(400px);
    transition: transform 0.3s ease;
    z-index: 1000;
  }
  
  .feedback.show {
    transform: translateX(0);
  }
  
  .feedback.success {
    border-color: rgba(52, 199, 89, 0.3);
    background: rgba(52, 199, 89, 0.1);
  }
  
  .feedback.error {
    border-color: rgba(255, 59, 48, 0.3);
    background: rgba(255, 59, 48, 0.1);
  }
  
  /* Overlay Scansione Multipla */
  .multiscan-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    z-index: 2000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }
  
  .multiscan-overlay.show {
    display: flex;
  }
  
  .multiscan-container {
    background: rgba(28, 28, 30, 0.98);
    backdrop-filter: blur(40px);
    -webkit-backdrop-filter: blur(40px);
    border: 1px solid rgba(255, 255, 255, 0.12);
    border-radius: 24px;
    padding: 2.5rem;
    max-width: 600px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 32px 80px rgba(0, 0, 0, 0.6);
    position: relative;
  }
  
  .multiscan-header {
    text-align: center;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .multiscan-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: #ffffff;
    margin: 0 0 0.5rem 0;
    letter-spacing: -0.04em;
  }
  
  .multiscan-subtitle {
    font-size: 1rem;
    color: #999999;
    font-weight: 500;
  }
  
  .multiscan-status {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    margin-bottom: 2rem;
    padding: 1rem;
    background: rgba(0, 122, 255, 0.1);
    border: 1px solid rgba(0, 122, 255, 0.2);
    border-radius: 16px;
    color: #007aff;
    font-weight: 600;
    animation: pulseBlue 2s infinite;
  }
  
  .multiscan-status i {
    font-size: 1.2rem;
  }
  
  .multiscan-products {
    margin-bottom: 2rem;
  }
  
  .multiscan-products-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #ffffff;
    margin: 0 0 1rem 0;
    letter-spacing: -0.02em;
  }
  
  .multiscan-products-list {
    display: grid;
    gap: 0.75rem;
    max-height: 300px;
    overflow-y: auto;
  }
  
  .multiscan-product-item {
    background: rgba(44, 44, 46, 0.6);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 12px;
    padding: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .multiscan-product-image {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    object-fit: cover;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    flex-shrink: 0;
  }
  
  .multiscan-product-info {
    flex: 1;
    min-width: 0;
  }
  
  .multiscan-product-name {
    font-size: 0.9rem;
    font-weight: 600;
    color: #ffffff;
    margin: 0 0 0.25rem 0;
    letter-spacing: -0.01em;
  }
  
  .multiscan-product-status {
    font-size: 0.8rem;
    color: #999999;
    font-weight: 500;
  }
  
  .multiscan-product-status.in-stock {
    color: #34c759;
  }
  
  .multiscan-product-status.out-stock {
    color: #ff3b30;
  }
  
  .multiscan-close {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    width: 40px;
    height: 40px;
    border-radius: 12px;
    border: none;
    background: rgba(255, 255, 255, 0.1);
    color: #999999;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
  }
  
  .multiscan-close:hover {
    background: rgba(255, 255, 255, 0.2);
    color: #ffffff;
  }
  
  .multiscan-empty {
    text-align: center;
    color: #999999;
    padding: 2rem;
  }
  
  .multiscan-empty i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }
  
  /* Overlay Tag Vergine */
  .virgin-tag-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    z-index: 3000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }
  
  .virgin-tag-overlay.show {
    display: flex;
  }
  
  .virgin-tag-container {
    background: rgba(28, 28, 30, 0.98);
    backdrop-filter: blur(40px);
    -webkit-backdrop-filter: blur(40px);
    border: 1px solid rgba(255, 255, 255, 0.12);
    border-radius: 24px;
    padding: 3rem;
    max-width: 500px;
    width: 100%;
    text-align: center;
    box-shadow: 0 32px 80px rgba(0, 0, 0, 0.6);
    position: relative;
    overflow: hidden;
  }
  
  .virgin-tag-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(52, 199, 89, 0.5), transparent);
  }
  
  .virgin-tag-icon {
    font-size: 4rem;
    color: #34c759;
    margin-bottom: 1.5rem;
    animation: pulseGreen 2s infinite;
  }
  
  @keyframes pulseGreen {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.1); opacity: 0.8; }
    100% { transform: scale(1); opacity: 1; }
  }
  
  .virgin-tag-title {
    font-size: 2rem;
    font-weight: 700;
    color: #ffffff;
    margin: 0 0 1rem 0;
    letter-spacing: -0.04em;
  }
  
  .virgin-tag-subtitle {
    font-size: 1.1rem;
    color: #999999;
    margin-bottom: 2rem;
    line-height: 1.4;
  }
  
  .virgin-tag-id {
    background: rgba(52, 199, 89, 0.1);
    border: 1px solid rgba(52, 199, 89, 0.2);
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 2rem;
    color: #34c759;
    font-weight: 600;
    font-size: 1.2rem;
  }
  
  .virgin-tag-status {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    color: #34c759;
    font-weight: 500;
    font-size: 1rem;
  }
  
  .virgin-tag-status i {
    font-size: 1.2rem;
  }
  

  
  /* Responsive */
  @media (max-width: 768px) {
    .page-container {
      padding: 0.5rem;
    }
    
    .event-header,
    .products-section,
    .actions-section {
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .event-title {
      font-size: 2rem;
    }
    
    .event-meta {
      gap: 1rem;
    }
    
    .event-actions {
      justify-content: center;
      margin-top: 1rem;
    }
    
    .primary-action {
      padding: 1rem 2rem;
      font-size: 1rem;
    }
  }
</style>

<div class="page-container">
  <!-- Header Evento -->
  <div class="event-header">
    <h1 class="event-title">{{ evento.getNome() }}</h1>
    
    <div class="event-meta">
      <div class="meta-item">
        <i class="fas fa-map-marker-alt"></i>
        <span>{{ evento.getCitta() }}</span>
      </div>
      <div class="meta-item">
        <i class="fas fa-calendar"></i>
        <span>{{ evento.getData()|date('d/m/Y') }}</span>
      </div>
    </div>
    
    <div class="event-actions">
      <a href="{{ path('app_evento_modifica', { id: evento.id }) }}" class="action-btn edit" aria-label="Modifica evento">
        <i class="fas fa-edit"></i>
      </a>
      <form method="post" action="{{ path('app_evento_delete', { id: evento.id }) }}" onsubmit="return confirm('Eliminare questo evento?')" style="display: inline;">
        <input type="hidden" name="_token" value="{{ csrf_token('delete-evento' ~ evento.id) }}">
        <button type="submit" class="action-btn delete" aria-label="Elimina evento">
          <i class="fas fa-trash"></i>
        </button>
      </form>
    </div>
  </div>

  <!-- Sezione Prodotti -->
  <div class="products-section">
    <div class="section-header">
      <h2 class="section-title">Prodotti Associati</h2>
      <div class="products-count">{{ prodotti|length }} prodotti</div>
    </div>
    
    <div class="products-grid">
      {% if prodotti is empty %}
        <div style="text-align: center; color: #999999; padding: 2rem;">
          <i class="fas fa-box-open" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
          <p>Nessun prodotto associato a questo evento</p>
        </div>
      {% else %}
        {% for prodotto in prodotti %}
          <div class="product-item">
            <img src="https://picsum.photos/400/400?random={{ loop.index }}"
                 alt="{{ prodotto.getName() }}"
                 class="product-image">
            <div class="product-info">
              <div class="product-name">{{ prodotto.getName() }}</div>
              <div class="product-status {{ prodotto.isOut() ? 'out-stock' : 'in-stock' }}">
                {{ prodotto.isOut() ? 'Fuori magazzino' : 'In magazzino' }}
              </div>
            </div>
            <form method="post"
                  action="{{ path('app_evento_remove_prodotto', { id: evento.id, productId: prodotto.id }) }}"
                  onsubmit="return confirm('Rimuovere questo prodotto dall\'evento?')">
              <input type="hidden" name="_token" value="{{ csrf_token('remove-prodotto' ~ evento.id ~ '-' ~ prodotto.id) }}">
              <button type="submit" class="remove-btn" aria-label="Rimuovi">&times;</button>
            </form>
          </div>
        {% endfor %}
      {% endif %}
    </div>
  </div>

  <!-- Sezione Azioni -->
  <div class="actions-section">
    <div class="actions-container">
      <form id="scan-nfc-form" action="{{ path('app_evento_add_nfc', { id: evento.id }) }}" method="post">
        <input type="hidden" name="nfc_Id" id="nfc-tag-id">
        <button type="button" class="primary-action" id="scan-btn">
          <i class="fas fa-plus"></i>
          <span>Associa Prodotto</span>
        </button>
      </form>
      
      <div class="secondary-option">
        <span>oppure</span>
        <button id="btn-multiscan" class="secondary-action">
          <i class="fas fa-stream"></i>
          <span>Scansione Multipla</span>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Feedback Container -->
<div id="feedback" class="feedback"></div>

<!-- Overlay Scansione Multipla -->
<div id="multiscan-overlay" class="multiscan-overlay">
  <div class="multiscan-container">
    <button class="multiscan-close" id="multiscan-close" aria-label="Chiudi">
      <i class="fas fa-times"></i>
    </button>
    
    <div class="multiscan-header">
      <h2 class="multiscan-title">Scansione Multipla</h2>
      <p class="multiscan-subtitle">Modalità attiva - Scansiona i tag NFC</p>
    </div>
    
    <div class="multiscan-status">
      <i class="fas fa-stream"></i>
      <span>Scansione Multipla Attiva</span>
    </div>
    
    <div class="multiscan-products">
      <h3 class="multiscan-products-title">Prodotti in questo evento</h3>
      <div id="multiscan-products-list" class="multiscan-products-list">
        {% if prodotti is empty %}
          <div class="multiscan-empty">
            <i class="fas fa-box-open"></i>
            <p>Nessun prodotto associato</p>
          </div>
        {% else %}
          {% for prodotto in prodotti %}
            <div class="multiscan-product-item">
              <img src="https://picsum.photos/400/400?random={{ loop.index }}"
                   alt="{{ prodotto.getName() }}"
                   class="multiscan-product-image">
              <div class="multiscan-product-info">
                <div class="multiscan-product-name">{{ prodotto.getName() }}</div>
                <div class="multiscan-product-status {{ prodotto.isOut() ? 'out-stock' : 'in-stock' }}">
                  {{ prodotto.isOut() ? 'Fuori magazzino' : 'In magazzino' }}
                </div>
              </div>
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </div>
  </div>
</div>

<!-- Overlay Tag Vergine -->
<div id="virgin-tag-overlay" class="virgin-tag-overlay">
  <div class="virgin-tag-container">
    <div class="virgin-tag-icon">
      <i class="fas fa-tag"></i>
    </div>
    
    <h2 class="virgin-tag-title">Tag Vergine Rilevato</h2>
    <p class="virgin-tag-subtitle">Questo tag NFC non è ancora registrato nel sistema. Vuoi registrarlo ora?</p>
    
    <div class="virgin-tag-id">
      ID: <span id="virgin-tag-id">-</span>
    </div>
    
    <div class="virgin-tag-status">
      <i class="fas fa-spinner fa-spin"></i>
      <span>Registrazione automatica in corso...</span>
    </div>
  </div>
</div>

<script>
  // Ottieni l'ID dell'evento dall'URL o da un elemento nascosto
  const evento = {
    id: {{ evento.id }}
  };
  
  let isMultiScanActive = false;
  let ndefReader = null;
  let ndefAbortController = null;
  const scanBtn = document.getElementById('scan-btn');
  const multiscanBtn = document.getElementById('btn-multiscan');
  const feedback = document.getElementById('feedback');
  const multiscanOverlay = document.getElementById('multiscan-overlay');
  const multiscanClose = document.getElementById('multiscan-close');
  const multiscanProductsList = document.getElementById('multiscan-products-list');
  const virginTagOverlay = document.getElementById('virgin-tag-overlay');
  const virginTagId = document.getElementById('virgin-tag-id');

  function showFeedback(message, type = 'success') {
    feedback.textContent = message;
    feedback.className = `feedback ${type} show`;
    
    setTimeout(() => {
      feedback.classList.remove('show');
    }, 3000);
  }

  function updateMultiscanProductsList() {
    const productsGrid = document.querySelector('.products-grid');
    const products = productsGrid.querySelectorAll('.product-item');
    
    if (products.length === 0) {
      multiscanProductsList.innerHTML = `
        <div class="multiscan-empty">
          <i class="fas fa-box-open"></i>
          <p>Nessun prodotto associato</p>
        </div>
      `;
    } else {
      let productsHTML = '';
      products.forEach((product, index) => {
        const image = product.querySelector('.product-image').src;
        const name = product.querySelector('.product-name').textContent;
        const status = product.querySelector('.product-status');
        const statusText = status.textContent;
        const statusClass = status.classList.contains('in-stock') ? 'in-stock' : 'out-stock';
        
        productsHTML += `
          <div class="multiscan-product-item">
            <img src="${image}" alt="${name}" class="multiscan-product-image">
            <div class="multiscan-product-info">
              <div class="multiscan-product-name">${name}</div>
              <div class="multiscan-product-status ${statusClass}">${statusText}</div>
            </div>
          </div>
        `;
      });
      multiscanProductsList.innerHTML = productsHTML;
    }
  }

  function showMultiscanOverlay() {
    multiscanOverlay.classList.add('show');
    updateMultiscanProductsList();
  }

  function hideMultiscanOverlay() {
    multiscanOverlay.classList.remove('show');
  }

  async function handleVirginTag(nfcId) {
    console.log('Gestione tag vergine iniziata per ID:', nfcId);
    
    // Ferma la lettura NFC per evitare interferenze
    if (ndefReader && ndefAbortController) {
      ndefAbortController.abort();
      ndefReader = null;
    }
    
    // Mostra l'overlay con animazione
    virginTagId.textContent = nfcId;
    virginTagOverlay.classList.add('show');
    
    // Scrivi automaticamente il tag
    console.log('Scrittura tag in corso...');
    const writeSuccess = await writeNfcTag(nfcId);
    
    if (writeSuccess) {
      console.log('Tag scritto con successo, aspetto 2 secondi...');
      showFeedback('Tag registrato con successo!', 'success');
      
      // Aspetta che l'animazione finisca (2 secondi) poi reindirizza
      setTimeout(() => {
        console.log('Reindirizzamento alla pagina di creazione prodotto...');
        hideVirginTagOverlay();
        // Reindirizza direttamente alla pagina di creazione prodotto
        window.location.href = `/magazzino/nuovo?nfcId=${nfcId}`;
      }, 2000);
    } else {
      console.log('Errore nella scrittura del tag');
      showFeedback('Errore nella registrazione del tag', 'error');
      hideVirginTagOverlay();
    }
  }

  function hideVirginTagOverlay() {
    virginTagOverlay.classList.remove('show');
  }

  async function getNextNfcId() {
    try {
      const response = await fetch('/nfc/next-id');
      const result = await response.json();
      return result.nextId;
    } catch (error) {
      console.error('Errore nel recupero del prossimo ID:', error);
      return null;
    }
  }

  async function writeNfcTag(nfcId) {
    try {
      const ndef = new NDEFReader();
      await ndef.write({
        records: [
          {
            recordType: "text",
            data: nfcId.toString()
          }
        ]
      });
      return true;
    } catch (error) {
      console.error('Errore nella scrittura del tag:', error);
      return false;
    }
  }

  async function addProductToEvent(nfcId) {
    try {
      console.log('[NFC] Valore letto dal tag:', nfcId);
      const formData = new FormData();
      formData.append('nfc_Id', nfcId);

      console.log('[NFC] Invio POST a:', `/eventi/${evento.id}/add-nfc`);
      const response = await fetch(`/eventi/${evento.id}/add-nfc`, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      });

      const result = await response.json();
      console.log('[NFC] Risposta backend:', result);

      if (result.success) {
        showFeedback(result.message, 'success');
        // Aggiorna la lista prodotti dinamicamente
        const productsGrid = document.querySelector('.products-grid');
        const productsCount = document.querySelector('.products-count');
        
        if (productsGrid.innerHTML.includes('Nessun prodotto')) {
          productsGrid.innerHTML = '';
        }
        
        const newProduct = document.createElement('div');
        newProduct.className = 'product-item';
        newProduct.innerHTML = `
          <img src="https://picsum.photos/400/400?random=${Date.now()}"
               alt="${result.product.name}"
               class="product-image">
          <div class="product-info">
            <div class="product-name">${result.product.name}</div>
            <div class="product-status ${result.product.isOut ? 'out-stock' : 'in-stock'}">
              ${result.product.isOut ? 'Fuori magazzino' : 'In magazzino'}
            </div>
          </div>
          <form method="post"
                action="/eventi/${result.eventoId}/remove-prodotto/${result.product.id}"
                onsubmit="return confirm('Rimuovere questo prodotto dall\'evento?')">
            <input type="hidden" name="_token" value="${result.csrfToken}">
            <button type="submit" class="remove-btn" aria-label="Rimuovi">&times;</button>
          </form>
        `;
        
        productsGrid.appendChild(newProduct);
        
        // Aggiorna il contatore
        const currentCount = parseInt(productsCount.textContent);
        productsCount.textContent = `${currentCount + 1} prodotti`;
        
        // Aggiorna l'overlay se è attivo
        if (typeof isMultiScanActive !== 'undefined' && isMultiScanActive) {
          updateMultiscanProductsList();
        }
        
      } else {
        showFeedback(result.message + ' (NFC: ' + nfcId + ')', 'error');
        // Controlla se è un tag vergine (prodotto non trovato)
        if (result.message.includes('non riconosciuto') || result.message.includes('non registrato')) {
          console.log('Tag vergine rilevato, ottengo prossimo ID...');
          // Ottieni il prossimo ID disponibile
          const nextId = await getNextNfcId();
          if (nextId) {
            console.log('Prossimo ID ottenuto:', nextId);
            await handleVirginTag(nextId);
            return;
          }
        }
        // Gestisce sia errori di prodotto non trovato che già associato
      }
    } catch (error) {
      showFeedback('Errore durante l\'aggiunta del prodotto: ' + error, 'error');
      console.error('[NFC] Errore fetch:', error);
    }
  }

  // Gestione scansione singola
  if (scanBtn) {
    scanBtn.addEventListener('click', async () => {
      if (!('NDEFReader' in window)) {
        alert("Il tuo dispositivo non supporta NFC.");
        return;
      }
      
      if (isMultiScanActive) {
        showFeedback('Disattiva prima la scansione multipla', 'error');
        return;
      }
      
      try {
        ndefReader = new NDEFReader();
        ndefAbortController = new AbortController();
        await ndefReader.scan({ signal: ndefAbortController.signal });
        
        ndefReader.addEventListener('readingerror', error => {
          showFeedback("Errore durante la lettura NFC", 'error');
        });
        
        ndefReader.addEventListener('reading', async ({ message }) => {
          // Previeni letture multiple durante la gestione del tag vergine
          if (virginTagOverlay.classList.contains('show')) {
            return;
          }
          
          let nfc_Id = null;
          for (const record of message.records) {
            if (record.recordType === "text") {
              nfc_Id = new TextDecoder().decode(record.data);
              break;
            }
          }
          
          if (nfc_Id) {
            console.log('[NFC] Valore letto dal tag:', nfc_Id);
            // Controlla se è un numero valido o un valore di reset
            if (!isNaN(Number(nfc_Id)) && nfc_Id !== 'RESET' && nfc_Id !== '') {
              showFeedback('Tag riconosciuto: ' + nfc_Id);
              await addProductToEvent(nfc_Id);
            } else {
              console.log('[NFC] Tag non valido o resettato:', nfc_Id);
              showFeedback("Tag non valido o resettato. Usa un tag registrato.", 'error');
            }
          } else {
            console.log('[NFC] Nessun valore letto dal tag');
            showFeedback("Nessun valore letto dal tag NFC", 'error');
          }
        });
      } catch (error) {
        showFeedback("Errore NFC: " + error.message, 'error');
      }
    });
  }

  // Gestione scansione multipla
  if (multiscanBtn) {
    multiscanBtn.addEventListener('click', async () => {
      if (!('NDEFReader' in window)) {
        alert("Il tuo dispositivo non supporta NFC.");
        return;
      }
      
      isMultiScanActive = !isMultiScanActive;
      
      if (isMultiScanActive) {
        multiscanBtn.classList.add('active');
        multiscanBtn.innerHTML = '<i class="fas fa-stream"></i><span>Scansione Multipla</span>';
        showMultiscanOverlay();
        
        try {
          ndefReader = new NDEFReader();
          ndefAbortController = new AbortController();
          await ndefReader.scan({ signal: ndefAbortController.signal });
          
          ndefReader.addEventListener('readingerror', error => {
            showFeedback("Errore durante la lettura NFC", 'error');
          });
          
          ndefReader.addEventListener('reading', async ({ message }) => {
            // Previeni letture multiple durante la gestione del tag vergine
            if (virginTagOverlay.classList.contains('show')) {
              return;
            }
            
            let nfc_Id = null;
            for (const record of message.records) {
              if (record.recordType === "text") {
                nfc_Id = new TextDecoder().decode(record.data);
                break;
              }
            }
            
            if (nfc_Id) {
              console.log('[NFC] Valore letto dal tag (multiscan):', nfc_Id);
              // Controlla se è un numero valido o un valore di reset
              if (!isNaN(Number(nfc_Id)) && nfc_Id !== 'RESET' && nfc_Id !== '') {
                showFeedback('Prodotto associato: ' + nfc_Id);
                await addProductToEvent(nfc_Id);
              } else {
                console.log('[NFC] Tag non valido o resettato (multiscan):', nfc_Id);
                showFeedback("Tag non valido o resettato. Usa un tag registrato.", 'error');
              }
            } else {
              console.log('[NFC] Nessun valore letto dal tag (multiscan)');
              showFeedback("Nessun valore letto dal tag NFC", 'error');
            }
          });
          
          showFeedback('Scansione multipla attivata');
        } catch (error) {
          showFeedback("Errore NFC: " + error.message, 'error');
          isMultiScanActive = false;
          multiscanBtn.classList.remove('active');
          multiscanBtn.innerHTML = '<i class="fas fa-stream"></i><span>Scansione Multipla</span>';
        }
              } else {
          multiscanBtn.classList.remove('active');
          multiscanBtn.innerHTML = '<i class="fas fa-stream"></i><span>Scansione Multipla</span>';
          hideMultiscanOverlay();
          showFeedback('Scansione multipla disattivata');
        }
    });
  }

  // Gestione chiusura overlay
  if (multiscanClose) {
    multiscanClose.addEventListener('click', () => {
      hideMultiscanOverlay();
      isMultiScanActive = false;
      multiscanBtn.classList.remove('active');
      multiscanBtn.innerHTML = '<i class="fas fa-stream"></i><span>Scansione Multipla</span>';
      showFeedback('Scansione multipla disattivata');
    });
  }

  // Chiusura overlay con ESC
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      if (isMultiScanActive) {
        hideMultiscanOverlay();
        isMultiScanActive = false;
        multiscanBtn.classList.remove('active');
        multiscanBtn.innerHTML = '<i class="fas fa-stream"></i><span>Scansione Multipla</span>';
        showFeedback('Scansione multipla disattivata');
      }
      if (virginTagOverlay.classList.contains('show')) {
        hideVirginTagOverlay();
        showFeedback('Registrazione completata');
      }
    }
  });


</script>

{% endblock %}