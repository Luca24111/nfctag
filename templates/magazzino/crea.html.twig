{% extends 'base.html.twig' %}

{% block title %}Nuovo Prodotto{% endblock %}

{% block body %}
<link href="https://fonts.cdnfonts.com/css/sf-pro-display" rel="stylesheet">
<style>
  body {
    background: var(--bg-primary);
    color: var(--text-primary);
    font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    margin: 0;
    letter-spacing: -0.04em;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .page-title {
    text-align: center;
    color: #fff;
    margin: 2rem 0;
    font-size: 2rem;
    font-weight: 600;
  }

  /* Sezione Immagine Migliorata */
  .image-section {
    background: #1e1e1e;
    border-radius: 16px;
    padding: 2rem;
    margin-bottom: 2rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .section-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #fff;
    margin: 0 0 1.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .image-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .image-btn {
    background: #2a2a2a;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1rem;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: 500;
  }

  .image-btn:hover {
    background: #3a3a3a;
    border-color: #007aff;
    transform: translateY(-1px);
  }

  .image-btn.active {
    background: #007aff;
    border-color: #007aff;
  }

  .image-btn i {
    font-size: 1.2rem;
  }

  /* Camera Container Migliorato - QUADRATO */
  .camera-container {
    display: none;
    background: #000;
    border-radius: 16px;
    overflow: hidden;
    margin-bottom: 1rem;
    position: relative;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .camera-container.active {
    display: block;
  }

  #video {
    width: 100%;
    height: 500px; /* QUADRATO */
    object-fit: cover;
    background: #000;
    display: block;
  }

  .camera-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .camera-frame {
    width: 300px; /* QUADRATO più grande */
    height: 300px; /* QUADRATO più grande */
    border: 3px solid rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.6);
  }

  .camera-controls {
    background: var(--bg-secondary);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem; /* Più spazio tra i pulsanti */
    flex-wrap: nowrap; /* Evita che si sovrappongano */
  }

  .camera-btn {
    background: #007aff;
    border: none;
    border-radius: 50%;
    width: 70px; /* Più grandi */
    height: 70px; /* Più grandi */
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem; /* Icone più grandi */
    flex-shrink: 0; /* Non si restringono */
  }

  .camera-btn:hover {
    background: #0056cc;
    transform: scale(1.1);
  }

  .camera-btn.secondary {
    background: rgba(255, 255, 255, 0.2);
    width: 60px; /* Più grandi */
    height: 60px; /* Più grandi */
    font-size: 1.4rem; /* Icone più grandi */
  }

  .camera-btn.secondary:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  /* Preview Migliorato - QUADRATO */
  .image-preview-container {
    display: none;
    background: var(--bg-secondary);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    text-align: center;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .image-preview-container.active {
    display: block;
  }

  #image-preview {
    width: 300px; /* QUADRATO fisso */
    height: 300px; /* QUADRATO fisso */
    object-fit: cover; /* Mantiene proporzioni */
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    display: block;
    margin: 0 auto 1rem auto;
  }

  .preview-actions {
    margin-top: 1rem;
    display: flex;
    gap: 1rem; /* Più spazio */
    justify-content: center;
    flex-wrap: wrap; /* Si adatta se necessario */
  }

  .preview-btn {
    background: #007aff;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 1.5rem; /* Più padding */
    color: white;
    cursor: pointer;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    min-width: 120px; /* Larghezza minima */
  }

  .preview-btn:hover {
    background: #0056cc;
  }

  .preview-btn.danger {
    background: #ff3b30;
  }

  .preview-btn.danger:hover {
    background: #d70015;
  }

  /* Info e Status */
  .image-info {
    display: none;
    background: rgba(0, 122, 255, 0.1);
    border: 1px solid rgba(0, 122, 255, 0.3);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    color: #007aff;
  }

  .image-info.active {
    display: block;
  }

  .image-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
  }

  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: #007aff;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
  }

  /* Form Styles */
  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #fff;
    font-weight: 500;
  }

  .form-control-dark {
    width: 100%;
    padding: 0.75rem;
    background: #2a2a2a;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #fff;
    font-size: 1rem;
  }

  .form-control-dark:focus {
    outline: none;
    border-color: #007aff;
    box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
  }

  .toggle-btn {
    background: linear-gradient(135deg, #007aff 0%, #0056cc 100%);
    color: white;
    border: none;
    border-radius: 12px;
    padding: 1rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    margin-top: 1rem;
  }

  .toggle-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 122, 255, 0.3);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .image-options {
      grid-template-columns: 1fr;
    }
    
    .camera-controls {
      gap: 1rem;
      padding: 1rem;
    }
    
    .camera-btn {
      width: 60px;
      height: 60px;
      font-size: 1.5rem;
    }
    
    .camera-btn.secondary {
      width: 50px;
      height: 50px;
      font-size: 1.2rem;
    }
    
    #video {
      height: 400px;
    }
    
    .camera-frame {
      width: 250px;
      height: 250px;
    }
    
    #image-preview {
      width: 250px;
      height: 250px;
    }
    
    .preview-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .preview-btn {
      width: 100%;
      max-width: 200px;
    }
  }

  @media (max-width: 480px) {
    .camera-controls {
      gap: 0.5rem;
    }
    
    .camera-btn {
      width: 50px;
      height: 50px;
      font-size: 1.2rem;
    }
    
    .camera-btn.secondary {
      width: 40px;
      height: 40px;
      font-size: 1rem;
    }
    
    #video {
      height: 350px;
    }
    
    .camera-frame {
      width: 200px;
      height: 200px;
    }
    
    #image-preview {
      width: 200px;
      height: 200px;
    }
  }
</style>

<div class="container">
  <h1 class="page-title">Nuovo Prodotto</h1>

  {{ form_start(form) }}
    <!-- Sezione Immagine Migliorata -->
    <div class="image-section">
      <h2 class="section-title">
        <i class="fas fa-camera"></i>
        Immagine del Prodotto
      </h2>
      
      <div class="image-options">
        <button type="button" id="upload-btn" class="image-btn">
          <i class="fas fa-upload"></i>
          Carica File
        </button>
        <button type="button" id="camera-btn" class="image-btn">
          <i class="fas fa-camera"></i>
          Scatta Foto
        </button>
      </div>

      <!-- Camera Container -->
      <div id="camera-container" class="camera-container">
        <video id="video" autoplay muted playsinline></video>
        <div class="camera-overlay">
          <div class="camera-frame"></div>
        </div>
        <div class="camera-controls">
          <button type="button" id="stop-camera-btn" class="camera-btn secondary">
            <i class="fas fa-times"></i>
          </button>
          <button type="button" id="capture-btn" class="camera-btn">
            <i class="fas fa-circle"></i>
          </button>
          <button type="button" id="switch-camera-btn" class="camera-btn secondary">
            <i class="fas fa-sync-alt"></i>
          </button>
        </div>
      </div>

      <!-- Preview Container -->
      <div id="preview-container" class="image-preview-container">
        <img id="image-preview" src="" alt="Preview">
        <div class="preview-actions">
          <button type="button" id="retake-btn" class="preview-btn">
            <i class="fas fa-redo"></i>
            Scatta di nuovo
          </button>
          <button type="button" id="remove-btn" class="preview-btn danger">
            <i class="fas fa-trash"></i>
            Rimuovi
          </button>
        </div>
      </div>

      <!-- Info Status -->
      <div id="image-info" class="image-info">
        <div class="image-status">
          <div class="status-indicator"></div>
          <span id="status-text">Pronto per scattare una foto</span>
        </div>
      </div>

      <!-- Campi nascosti -->
      {{ form_widget(form.immagine, {'attr': {'class': 'image-input', 'style': 'display: none;'}}) }}
      <input type="hidden" name="foto_base64" id="foto_base64" />
    </div>

    <!-- Altri campi del form -->
    <div class="form-group">
      {{ form_label(form.name) }}
      {{ form_widget(form.name, {'attr': {'class': 'form-control-dark'}}) }}
      {{ form_errors(form.name) }}
    </div>
    <div class="form-group">
      {{ form_label(form.scaffale) }}
      {{ form_widget(form.scaffale, {'attr': {'class': 'form-control-dark'}}) }}
      {{ form_errors(form.scaffale) }}
    </div>
    <div class="form-group">
      {{ form_label(form.description) }}
      {{ form_widget(form.description, {'attr':{'class':'form-control-dark','rows':4}}) }}
    </div>
    <button type="submit" class="toggle-btn">Salva Prodotto</button>
  {{ form_end(form) }}
</div>

<script>
  let stream = null;
  let currentImageSource = null; // 'upload' o 'camera'
  let facingMode = 'environment'; // 'environment' o 'user'
  
  // Elementi DOM
  const uploadBtn = document.getElementById('upload-btn');
  const cameraBtn = document.getElementById('camera-btn');
  const cameraContainer = document.getElementById('camera-container');
  const video = document.getElementById('video');
  const captureBtn = document.getElementById('capture-btn');
  const stopCameraBtn = document.getElementById('stop-camera-btn');
  const switchCameraBtn = document.getElementById('switch-camera-btn');
  const previewContainer = document.getElementById('preview-container');
  const imagePreview = document.getElementById('image-preview');
  const retakeBtn = document.getElementById('retake-btn');
  const removeBtn = document.getElementById('remove-btn');
  const imageInfo = document.getElementById('image-info');
  const statusText = document.getElementById('status-text');
  const imageInput = document.querySelector('.image-input');
  const fotoBase64Input = document.getElementById('foto_base64');
  
  // Gestione pulsanti immagine
  uploadBtn.addEventListener('click', function() {
    imageInput.click();
    setActiveButton('upload-btn');
    currentImageSource = 'upload';
    updateStatus('Seleziona un file immagine');
  });
  
  cameraBtn.addEventListener('click', function() {
    startCamera();
    setActiveButton('camera-btn');
    currentImageSource = 'camera';
    updateStatus('Inizializzazione fotocamera...');
  });
  
  function setActiveButton(activeId) {
    document.querySelectorAll('.image-btn').forEach(btn => btn.classList.remove('active'));
    document.getElementById(activeId).classList.add('active');
  }
  
  function updateStatus(message) {
    statusText.textContent = message;
    imageInfo.classList.add('active');
  }
  
  // Gestione fotocamera avanzata
  async function startCamera() {
    try {
      // Ferma stream esistente se presente
      if (stream) {
        stopCamera();
      }
      
      updateStatus('Richiesta accesso fotocamera...');
      
      stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: facingMode
        } 
      });
      
      video.srcObject = stream;
      cameraContainer.classList.add('active');
      updateStatus('Fotocamera attiva - Posiziona il prodotto nel riquadro');
      
      // Aspetta che il video sia caricato
      video.addEventListener('loadedmetadata', function() {
        updateStatus('Pronto per scattare');
      });
      
    } catch (err) {
      console.error('Errore accesso fotocamera:', err);
      updateStatus('Errore: ' + err.message);
      
      if (err.name === 'NotAllowedError') {
        alert('Permesso negato per la fotocamera. Verifica le impostazioni del browser.');
      } else if (err.name === 'NotFoundError') {
        alert('Nessuna fotocamera trovata sul dispositivo.');
      } else {
        alert('Errore nell\'accesso alla fotocamera: ' + err.message);
      }
    }
  }
  
  // Scatta foto migliorato - QUADRATA
  captureBtn.addEventListener('click', async function() {
    if (!stream) {
      alert('Fotocamera non attiva');
      return;
    }
    
    updateStatus('Scattando foto...');
    
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Calcola dimensioni per foto quadrata
    const videoWidth = video.videoWidth;
    const videoHeight = video.videoHeight;
    const size = Math.min(videoWidth, videoHeight); // Prendi il lato più piccolo
    
    // Imposta canvas quadrato
    canvas.width = size;
    canvas.height = size;
    
    // Calcola offset per centrare il crop
    const offsetX = (videoWidth - size) / 2;
    const offsetY = (videoHeight - size) / 2;
    
    // Disegna solo la parte centrale quadrata del video
    ctx.drawImage(video, offsetX, offsetY, size, size, 0, 0, size, size);
    
    // Converti in base64 con qualità 0.9
    const imageData = canvas.toDataURL('image/jpeg', 0.9);
    
    // Mostra preview
    imagePreview.src = imageData;
    previewContainer.classList.add('active');

    // Salva anche in hidden per fallback server-side
    if (fotoBase64Input) {
      fotoBase64Input.value = imageData;
    }
    
    // Converte la foto in File e la inserisce nel campo file del form
    try {
      const res = await fetch(imageData);
      const blob = await res.blob();
      const file = new File([blob], `camera_${Date.now()}.jpg`, { type: 'image/jpeg' });
      const dt = new DataTransfer();
      dt.items.add(file);
      imageInput.files = dt.files;
    } catch (err) {
      console.warn('Impossibile allegare la foto al form:', err);
    }

    // Foto scattata con successo
    console.log('Foto scattata con successo');
    
    // Chiudi fotocamera
    stopCamera();
    
    updateStatus('Foto quadrata scattata con successo!');
    
    // Feedback sonoro (se supportato)
    if (typeof Audio !== 'undefined') {
      const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT');
      audio.play().catch(() => {}); // Ignora errori audio
    }
  });
  
  // Cambia fotocamera
  switchCameraBtn.addEventListener('click', function() {
    facingMode = facingMode === 'environment' ? 'user' : 'environment';
    startCamera();
  });
  
  // Chiudi fotocamera
  stopCameraBtn.addEventListener('click', stopCamera);
  
  function stopCamera() {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      stream = null;
    }
    
    cameraContainer.classList.remove('active');
    video.srcObject = null;
    
    if (currentImageSource === 'camera') {
      updateStatus('Fotocamera chiusa');
    }
  }
  
  // Gestione preview
  retakeBtn.addEventListener('click', function() {
    previewContainer.classList.remove('active');
    if (currentImageSource === 'camera') {
      startCamera();
    } else {
      imageInput.click();
    }
  });
  
  removeBtn.addEventListener('click', function() {
    previewContainer.classList.remove('active');
    imagePreview.src = '';
    imageInput.value = '';
    if (fotoBase64Input) fotoBase64Input.value = '';
    updateStatus('Immagine rimossa');
    setActiveButton('');
  });
  
  // Gestione upload file migliorata
  imageInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    
    if (file) {
      // Validazione file
      if (!file.type.startsWith('image/')) {
        alert('Seleziona un file immagine valido');
        return;
      }
      
      if (file.size > 10 * 1024 * 1024) { // 10MB
        alert('Il file è troppo grande. Massimo 10MB.');
        return;
      }
      
      updateStatus('Caricamento immagine...');
      
      const reader = new FileReader();
      reader.onload = function(e) {
        imagePreview.src = e.target.result;
        previewContainer.classList.add('active');
        updateStatus('Immagine caricata con successo');
        // Puliamo il base64 perché stiamo usando upload file
        if (fotoBase64Input) fotoBase64Input.value = '';
      };
      reader.readAsDataURL(file);
    }
  });
  
  // Validazione leggera in submit
  document.querySelector('form').addEventListener('submit', function(e) {
    const immagineFile = imageInput.files[0];
    if (!immagineFile) {
      if (!confirm('Nessuna immagine selezionata. Continuare comunque?')) {
        e.preventDefault();
      }
    }
  });
  
  // Pulisci fotocamera quando si lascia la pagina
  window.addEventListener('beforeunload', stopCamera);
  
  // Gestione errori globali
  window.addEventListener('error', function(e) {
    console.error('Errore JavaScript:', e.error);
    updateStatus('Errore: ' + e.error.message);
  });
</script>
{% endblock %}